- name: Libvirt - Install packages
  ansible.builtin.package:
    name:
      - bridge-utils
      - guestfs-tools
      - libvirt-daemon-system
      - python3-libvirt # Required by Ansible community.libvirt.virt
      - python3-lxml # Required by Ansible community.libvirt.virt

- name: Libvirt - Enable and start systemd unit
  ansible.builtin.systemd_service:
    name: libvirtd
    state: started
    enabled: true

- name: Ensure default storage pool exists
  ansible.builtin.include_tasks: libvirt_setup_storage_pool.yml
  vars:
    pool_name: default
    pool_path: /var/lib/libvirt/images

- name: Only keep loopback in main interfaces file
  ansible.builtin.copy:
    dest: /etc/network/interfaces
    owner: root
    group: root
    mode: "644"
    content: |
      # This file describes the network interfaces available on your system
      # and how to activate them. For more information, see interfaces(5).

      source /etc/network/interfaces.d/*

      # The loopback network interface
      auto lo
      iface lo inet loopback
  notify: Restart networking

- name: Create bridge
  ansible.builtin.copy:
    dest: /etc/network/interfaces.d/virbr200
    owner: root
    group: root
    mode: "644"
    content: |
      # Managed by Ansible in server/roles/jenswbe.vm_host/tasks/libvirt.yml
      # Based on https://www.beer.org/blog/index.php/2018/01/11/linux-add-a-usb-network-interface-to-a-bridge/

      rename /{{ jwvm_bridge_member_interface_prefix }}*={{ jwvm_bridge_member_interface_prefix }}

      auto virbr200
      iface virbr200 inet dhcp
          hwaddress ether {{ (ansible_facts | get_dict_key_contains(jwvm_bridge_member_interface_prefix))['macaddress'] }}
          bridge_ports {{ jwvm_bridge_member_interface_prefix }}
          bridge_stp off
          bridge_fd 0
          bridge_waitport 0

      auto {{ jwvm_bridge_member_interface_prefix }}
      allow-hotplug {{ jwvm_bridge_member_interface_prefix }}
      iface {{ jwvm_bridge_member_interface_prefix }} inet manual
          up bash -c 'brctl addif virbr200 {{ jwvm_bridge_member_interface_prefix }} || true'
  notify: Restart networking

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Drop default network
  community.libvirt.virt_net:
    name: default
    state: absent

- name: Setup basic networks
  ansible.builtin.include_tasks: libvirt_setup_network.yml
  vars:
    network_name: "{{ item.name }}"
    network_template_path: "networks/{{ item.prefix }}_{{ item.name }}.xml"
  loop:
    - name: nointernet
      prefix: "100"
    - name: lan
      prefix: "200"
    - name: nat
      prefix: "210"

- name: Copy helper scripts
  ansible.builtin.copy:
    src: "files/{{ item }}.sh"
    dest: /usr/local/sbin/{{ item }}
    owner: root
    group: root
    mode: "700"
  loop:
    - clone-vm
    - start-vm-after-nfs

- name: Copy start-vm-after-nfs@.service
  ansible.builtin.template:
    src: start-vm-after-nfs@.service
    dest: /etc/systemd/system/start-vm-after-nfs@.service
    owner: root
    group: root
    mode: "644"

- name: Reload systemd
  become: true
  ansible.builtin.systemd_service:
    daemon_reload: true

- name: Enable start-vm-after-nfs@.service
  ansible.builtin.systemd_service:
    name: "start-vm-after-nfs@{{ item }}"
    enabled: true
  loop: "{{ jwvm_start_vms_after_nfs }}"
