- name: Libvirt - Install packages
  ansible.builtin.package:
    name:
      - bridge-utils
      - guestfs-tools
      - libvirt-daemon-system
      - python3-libvirt # Required by Ansible community.libvirt.virt
      - python3-lxml # Required by Ansible community.libvirt.virt

- name: Libvirt - Enable and start systemd unit
  ansible.builtin.systemd_service:
    name: libvirtd
    state: started
    enabled: true

- name: Ensure default storage pool exists
  ansible.builtin.include_tasks: libvirt_setup_storage_pool.yml
  vars:
    pool_name: default
    pool_path: /var/lib/libvirt/images

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Drop default network
  community.libvirt.virt_net:
    name: default
    state: absent

- name: Setup basic networks
  ansible.builtin.include_tasks: libvirt_setup_network.yml
  vars:
    network_name: "{{ item.name }}"
    network_template_path: "networks/{{ item.prefix }}_{{ item.name }}.xml"
  loop:
    - name: nointernet
      prefix: "100"
    - name: nat
      prefix: "200"

- name: Copy helper scripts
  ansible.builtin.copy:
    src: "files/{{ item }}.sh"
    dest: /usr/local/sbin/{{ item }}
    owner: root
    group: root
    mode: "700"
  loop:
    - clone-vm
    - start-vm-after-nfs

- name: Copy start-vm-after-nfs@.service
  ansible.builtin.template:
    src: start-vm-after-nfs@.service
    dest: /etc/systemd/system/start-vm-after-nfs@.service
    owner: root
    group: root
    mode: "644"

- name: Reload systemd
  become: true
  ansible.builtin.systemd_service:
    daemon_reload: true

- name: Enable start-vm-after-nfs@.service
  ansible.builtin.systemd_service:
    name: "start-vm-after-nfs@{{ item }}"
    enabled: true
  loop: "{{ jwvm_start_vms_after_nfs }}"
