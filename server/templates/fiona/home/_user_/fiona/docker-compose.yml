#################################################################
#                            DEFAULTS                           #
#################################################################
x-defaults: &defaults
  restart: always
  extra_hosts:
    - "host.docker.internal:host-gateway"
  deploy:
    resources:
      limits:
        cpus: "2"
        memory: 512M

#################################################################
#                            SERVICES                           #
#################################################################
services:
  # =========================
  # =         PROXY         =
  # =========================
  # Having 2 Traefik instances (1 on host network and 1 on bridge network)
  # allows to have the real client IP's available inside the bridged
  # Treafik instance (using PROXY protocol). In case you would only have
  # a single instance on the host network, you would loose all the convenience
  # of the Docker provider support (not having to expose each service on a host
  # port and auto-configuration of the services/loadbalancers).
  traefik-host:
    <<: *defaults
    image: docker.io/library/traefik:latest
    container_name: traefik-host
    network_mode: host
    command:
      # - "--log.level=DEBUG"
      - "--providers.file.directory=/conf"
      - "--providers.file.watch=true"
      - "--entrypoints.tcp80.address=:80"
      - "--entrypoints.tcp443.address=:443"
    volumes:
      - ./traefik/host:/conf:ro

  traefik:
    <<: *defaults
    image: docker.io/library/traefik:latest
    container_name: traefik
    command:
      # - "--log.level=DEBUG"
      - "--accesslog.filepath=/access-logs/access.log" # Used by CrowdSec
      - "--providers.file.directory=/conf"
      - "--providers.file.watch=true"
      - "--providers.docker=true"
      - "--providers.docker.network=traefik"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.proxyProtocol.trustedIPs={{ network_any_private }}"
      - "--entrypoints.websecure.http.middlewares=secure-https@file"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.proxyProtocol.trustedIPs={{ network_any_private }}"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--certificatesresolvers.le-dns.acme.dnschallenge=true"
      - "--certificatesresolvers.le-dns.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.le-dns.acme.email={{ general_mail_admin }}@{{ general_domain_default }}"
      - "--certificatesresolvers.le-dns.acme.storage=/letsencrypt/acme-dns.json"
      - "--api=true"
      - "--ping.manualrouting=true"
    ports:
      - 127.0.0.1:2080:80
      - 127.0.0.1:2443:443
    networks:
      - traefik
    volumes:
      - ./traefik/bridge:/conf:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-cert:/letsencrypt
      - traefik-access-logs:/access-logs
    environment:
      TZ: "{{ general_timezone }}"
      CF_DNS_API_TOKEN: "{{ app_traefik_cloudflare_token }}"

  # ==========================
  # =         BLOCKY         =
  # ==========================
  blocky:
    <<: *defaults
    image: ghcr.io/0xerr0r/blocky:latest
    container_name: blocky
    ports:
      - "53:53/tcp" # DNS TCP
      - "53:53/udp" # DNS UDP
    volumes:
      - ./blocky/config.yml:/app/config.yml:ro

  blocky-pixelserv-tls: # Serves transparent pixels for Blocky
    <<: *defaults
    image: docker.io/imthai/pixelserv-tls:latest
    container_name: blocky-pixelserv-tls
    ports:
      - "192.168.50.61:80:80" # HTTP
      - "192.168.50.61:443:443" # HTTPS
    volumes:
      # MANUAL ACTION: Add /root/ca/ca.crt and /root/ca/ca.key with root only access.
      # sudo /root/ca/
      # sudo chmod 700 /root/ca/
      # sudo touch /root/ca/ca.key
      # sudo chmod 600 /root/ca/ca.key
      # sudo nano /root/ca/ca.key
      # sudo nano /root/ca/ca.crt
      # sudo chmod 600 /root/ca/ca.crt
      - /root/ca:/var/cache/pixelserv
    networks:
      macvlan:
        ipv4_address: 192.168.50.61

  # ==========================
  # =    UNIFI CONTROLLER    =
  # ==========================
  unifi-controller:
    <<: *defaults
    image: docker.io/linuxserver/unifi-controller:latest
    container_name: unifi-controller
    environment:
      TZ: "{{ general_timezone }}"
      PUID: "1000"
      PGID: "1000"
      MEM_LIMIT: "1024"
      MEM_STARTUP: "1024"
    volumes:
      - "{{ general_path_appdata }}/unifi-controller/config:/config"
    ports:
      - "10001:10001/udp" # Required for AP discovery
      - "8080:8080" # Required for device communication
    networks:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.unifi.entrypoints=websecure"
      - "traefik.http.routers.unifi.rule=Host(`unifi.{{ general_domain_local }}`)"
      - "traefik.http.routers.unifi.tls.certresolver=le-dns"
      - "traefik.http.services.unifi-{{ ansible_hostname }}.loadbalancer.server.port=8443"
      - "traefik.http.services.unifi-{{ ansible_hostname }}.loadbalancer.serverstransport=insecure@file"
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 2G

#################################################################
#                            NETWORKS                           #
#################################################################
networks:
  traefik:
    name: traefik

  macvlan:
    driver: macvlan
    ipam:
      driver: default
      config:
        - subnet: 192.168.50.0/24
          gateway: 192.168.50.1

#################################################################
#                            VOLUMES                            #
#################################################################
volumes:
  traefik-access-logs:
  traefik-cert:
