#################################################################
#                            DEFAULTS                           #
#################################################################

x-defaults: &defaults
  x-dummy: ""
  # Putting the anchor in this file ensures it's a valid YAML file for Renovate Bot
  #VAR:lookup('ansible.builtin.file', 'files/docker-compose-defaults.yml',) | indent(width=2):VAR#

x-extra-docker-host: &extra-docker-host
  extra_hosts:
    - "host.docker.internal:host-gateway"

x-healthcheck-mongo4: &healthcheck-mongo4
  healthcheck:
    test:
      [
        "CMD-SHELL",
        "mongo --quiet localhost --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 1)'",
      ]
    interval: 30s
    timeout: 10s
    retries: 5

x-fix-prettier-formatting:

#################################################################
#                            SERVICES                           #
#################################################################
services:
  # =========================
  # =         PROXY         =
  # =========================
  # Having 2 reverse proxies (1 on host network and 1 on bridge network)
  # allows to have the real client IP's available inside the bridged
  # Treafik instance (using PROXY protocol). In case you would only have
  # a single reverse proxy on the host network, you would loose all the convenience
  # of the Traefik Docker provider support (not having to expose each service on a host
  # port and auto-configuration of the services/loadbalancers).
  nginx:
    <<: *defaults
    image: docker.io/library/nginx:alpine
    container_name: nginx
    network_mode: host
    volumes:
      - ./nginx/default.conf:/etc/nginx/nginx.conf:ro

  traefik:
    <<: *defaults
    image: docker.io/library/traefik:latest
    container_name: traefik
    command:
      # - "--log.level=DEBUG"
      - "--accesslog.filepath=/access-logs/access.log" # Used by CrowdSec
      - "--providers.file.directory=/conf"
      - "--providers.file.watch=true"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.proxyProtocol.trustedIPs=#VAR:network_any_private:VAR#"
      - "--entrypoints.websecure.http.middlewares=secure-https@file"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.proxyProtocol.trustedIPs=#VAR:network_any_private:VAR#"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--certificatesresolvers.le-dns.acme.dnschallenge=true"
      - "--certificatesresolvers.le-dns.acme.dnschallenge.provider=desec"
      - "--certificatesresolvers.le-dns.acme.email=#VAR:general_mail_admin:VAR#@#VAR:general_domain_default:VAR#"
      - "--certificatesresolvers.le-dns.acme.storage=/letsencrypt/acme-dns.json"
      - "--api=true"
      - "--ping.manualrouting=true"
    ports:
      - 127.0.0.1:2080:80
      - 127.0.0.1:2443:443
    networks:
      - traefik
    volumes:
      - ./traefik:/conf:ro
      - traefik-cert:/letsencrypt
      - traefik-access-logs:/access-logs
    environment:
      TZ: "#VAR:general_timezone:VAR#"
      DESEC_TOKEN: "#VAR:app_traefik_desec_token:VAR#"

  # ==========================
  # =         BLOCKY         =
  # ==========================
  blocky:
    <<: *defaults
    image: ghcr.io/0xerr0r/blocky:latest
    container_name: blocky
    networks:
      - traefik
    ports:
      - "53:53/tcp" # DNS TCP
      - "53:53/udp" # DNS UDP
    volumes:
      - ./blocky/config.yml:/app/config.yml:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.blocky.entrypoints=websecure"
      - "traefik.http.routers.blocky.rule=Method(`GET`) && Host(`blocky.fiona.#VAR:general_domain_local:VAR#`) && Path(`/metrics`)"
      - "traefik.http.routers.blocky.tls.certresolver=le-dns"
      - "traefik.http.services.blocky-#VAR:ansible_hostname:VAR#.loadbalancer.server.port=8080"

  blocky-pixelserv-tls: # Serves transparent pixels for Blocky
    <<: *defaults
    image: docker.io/imthai/pixelserv-tls:latest
    container_name: blocky-pixelserv-tls
    volumes:
      # MANUAL ACTION: Add /root/ca/ca.crt and /root/ca/ca.key with root only access.
      # sudo /root/ca/
      # sudo chmod 700 /root/ca/
      # sudo touch /root/ca/ca.key
      # sudo chmod 600 /root/ca/ca.key
      # sudo nano /root/ca/ca.key
      # sudo nano /root/ca/ca.crt
      # sudo chmod 600 /root/ca/ca.crt
      - /root/ca:/var/cache/pixelserv
    networks:
      macvlan:
        ipv4_address: 192.168.50.61

  # ===========================
  # =    UNIFI NETWORK APP    =
  # ===========================
  unifi-network-app:
    <<: *defaults
    image: lscr.io/linuxserver/unifi-network-application:latest
    container_name: unifi-network-app
    environment:
      TZ: "#VAR:general_timezone:VAR#"
      PUID: "1000"
      PGID: "1000"
      MEM_LIMIT: "1024"
      MEM_STARTUP: "1024"
      MONGO_HOST: unifi-mongodb
      MONGO_PORT: "27017"
      MONGO_USER: "#VAR:app_unifi_mongodb_user:VAR#"
      MONGO_PASS: "#VAR:app_unifi_mongodb_password:VAR#"
      MONGO_DBNAME: unifi
    volumes:
      - "#VAR:general_path_appdata:VAR#/unifi/network-app/config:/config"
    ports:
      - "10001:10001/udp" # Required for AP discovery
      - "8080:8080" # Required for device communication
    networks:
      - traefik
      - unifi
    depends_on:
      unifi-mongodb:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 2G

  unifi-mongodb:
    <<: [*defaults, *healthcheck-mongo4]
    # "Version 8.1 and newer supports up to MongoDB 7.0."
    # See release notes at https://www.ui.com/download/releases/network-server
    build: ./unifi/mongodb
    container_name: unifi-mongodb
    environment:
      TZ: "#VAR:general_timezone:VAR#"
    networks:
      - unifi
    volumes:
      - "#VAR:general_path_appdata:VAR#/unifi/mongodb/data:/data/db"
      - unifi-mongodb-dump:/backup
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 2G

  # =========================
  # =         PEANUT        =
  # =========================
  peanut:
    <<: [*defaults, *extra-docker-host]
    image: docker.io/brandawg93/peanut:latest
    container_name: peanut
    networks:
      - traefik
    environment:
      TZ: "#VAR:general_timezone:VAR#"
      NUT_HOST: host.docker.internal
      WEB_HOST: "0.0.0.0"

  # =========================
  # =        CROWDSEC       =
  # =========================
  crowdsec:
    <<: *defaults
    image: ghcr.io/crowdsecurity/crowdsec:v1.6.2-debian
    container_name: crowdsec
    ports:
      - 127.0.0.1:9000:8080
      - 6060:6060
    environment:
      TZ: "#VAR:general_timezone:VAR#"
      COLLECTIONS: >-
        crowdsecurity/http-cve
        crowdsecurity/linux
        crowdsecurity/traefik
      PARSERS: >-
        crowdsecurity/nextcloud-whitelist
      GID: "#VAR:ansible_real_group_id:VAR#"
      BOUNCER_KEY_firewall: "#VAR:app_crowdsec_bouncer_firewall_key:VAR#"
    volumes:
      # Config
      - ./crowdsec/acquis.yaml:/etc/crowdsec/acquis.yaml
      - crowdsec-db:/var/lib/crowdsec/data/
      - crowdsec-config:/etc/crowdsec/
      # Logs
      - /var/log/journal:/var/log/host:ro # SSHD logs for Debian
      - traefik-access-logs:/var/log/traefik:ro

  # ==========================
  # =         BACKUP         =
  # ==========================
  borgmatic:
    <<: *defaults
    image: ghcr.io/borgmatic-collective/borgmatic:1.8.9
    container_name: borgmatic
    privileged: true # Required for borg mount
    cap_add:
      - SYS_ADMIN # Required for borg mount
    volumes:
      # Backup locations
      - "unifi-mongodb-dump:/mnt/source/unifi/mongodb:ro"
      # Config and cache
      - "./borgmatic/borgmatic.d/config.yaml:/etc/borgmatic.d/config.yaml"
      - "./borgmatic/ssh/BorgHost:/root/.ssh/BorgHost"
      - "./borgmatic/ssh/known_hosts:/root/.ssh/known_hosts"
      - "#VAR:general_path_appdata:VAR#/borgmatic/borgmatic/config:/root/.config/borg"
      - "#VAR:general_path_appdata:VAR#/borgmatic/borgmatic/cache:/root/.cache/borg"
      - "#VAR:general_path_appdata:VAR#/borgmatic/borgmatic/restore:/mnt/restore"
    devices:
      - "/dev/fuse:/dev/fuse" # Required for borg mount
    environment:
      TZ: "#VAR:general_timezone:VAR#"
      BACKUP_CRON: "0 3 * * *"
      BORG_PASSPHRASE: "#VAR:app_borgmatic_borg_passphrase:VAR#"
      BORG_HOSTNAME_IS_UNIQUE: "yes" # Automatically removes stale locks
      BORG_HOST_ID: "#VAR:ansible_hostname:VAR#"
    deploy:
      resources:
        limits:
          cpus: "3"
          memory: 4G

#################################################################
#                            NETWORKS                           #
#################################################################
networks:
  traefik:
    name: traefik

  unifi:
    name: unifi

  macvlan:
    name: macvlan
    driver: macvlan
    driver_opts:
      parent: enp2s0
    ipam:
      config:
        - subnet: 192.168.50.0/24
          ip_range: 192.168.50.60/30 # .60 - .63
          gateway: 192.168.50.1

#################################################################
#                            VOLUMES                            #
#################################################################
volumes:
  crowdsec-config:
  crowdsec-db:
  traefik-access-logs:
  traefik-cert:
  unifi-mongodb-dump:
