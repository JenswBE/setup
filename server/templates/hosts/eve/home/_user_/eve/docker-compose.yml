#################################################################
#                            DEFAULTS                           #
#################################################################

x-defaults: &defaults
  x-dummy: ""
  # Putting the anchor in this file ensures it's a valid YAML file for Renovate Bot
  #VAR:lookup('ansible.builtin.file', 'files/docker-compose-defaults.yml',) | indent(width=2):VAR#

x-extra-hosts-wireguard: &extra-hosts-wireguard
  extra_hosts:
    #BLOCK:- for wg_peer in (app_wireguard[0].peers | selectattr("host", "defined")) :BLOCK#
    - "#VAR:wg_peer.host:VAR#.wireguard:#VAR:wg_peer.allowed_ips[0] | regex_replace('/\\d+$', ''):VAR#"
    #BLOCK: endfor :BLOCK#

x-healthcheck-postgres: &healthcheck-postgres
  healthcheck:
    test:
      [
        "CMD-SHELL",
        "sh -c 'pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}'",
      ]
    interval: 30s
    timeout: 10s
    retries: 5

#################################################################
#                            SERVICES                           #
#################################################################
services:
  # =========================
  # =         PROXY         =
  # =========================
  # Having 2 reverse proxies (1 on host network and 1 on bridge network)
  # allows to have the real client IP's available inside the bridged
  # Treafik instance (using PROXY protocol). In case you would only have
  # a single reverse proxy on the host network, you would loose all the convenience
  # of the Traefik Docker provider support (not having to expose each service on a host
  # port and auto-configuration of the services/loadbalancers).
  nginx:
    <<: *defaults
    image: docker.io/library/nginx:alpine
    container_name: nginx
    network_mode: host
    volumes:
      - ./nginx/host/default.conf:/etc/nginx/nginx.conf:ro

  traefik:
    <<: *defaults
    image: docker.io/library/traefik:latest
    container_name: traefik
    command:
      # - "--log.level=DEBUG"
      - "--accesslog.filepath=/access-logs/access.log" # Used by CrowdSec
      - "--providers.file.directory=/conf"
      - "--providers.file.watch=true"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.proxyProtocol.trustedIPs=#VAR:network_any_private:VAR#"
      - "--entrypoints.websecure.http.middlewares=secure-https@file"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.proxyProtocol.trustedIPs=#VAR:network_any_private:VAR#"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--certificatesresolvers.le-tls.acme.tlsChallenge=true"
      - "--certificatesresolvers.le-tls.acme.email=#VAR:general_mail_admin:VAR#@#VAR:general_domain_default:VAR#"
      - "--certificatesresolvers.le-tls.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.le-tls-staging.acme.tlsChallenge=true"
      - "--certificatesresolvers.le-tls-staging.acme.email=#VAR:general_mail_admin:VAR#@#VAR:general_domain_default:VAR#"
      - "--certificatesresolvers.le-tls-staging.acme.storage=/letsencrypt/acme-staging.json"
      - "--certificatesResolvers.le-tls-staging.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--api=true"
      - "--ping.manualrouting=true"
    ports:
      - 127.0.0.1:2080:80
      - 127.0.0.1:2443:443
    networks:
      - traefik
    volumes:
      - ./traefik:/conf:ro
      - traefik-cert:/letsencrypt/
      - traefik-access-logs:/access-logs
    environment:
      TZ: "#VAR:general_timezone:VAR#"

  oauth2-proxy:
    <<: *defaults
    image: quay.io/oauth2-proxy/oauth2-proxy:latest
    container_name: oauth2-proxy
    command: >
      --http-address=0.0.0.0:4180
      --reverse-proxy
      --provider=keycloak-oidc
      --oidc-issuer-url=#VAR:app_oauth2_proxy_issuer_url:VAR#
      --client-id=#VAR:app_oauth2_proxy_client_id:VAR#
      --client-secret=#VAR:app_oauth2_proxy_client_secret:VAR#
      --code-challenge-method=S256
      --email-domain=*
      --cookie-domain=#VAR:general_domain_default:VAR#
      --cookie-secret=#VAR:app_oauth2_proxy_cookie_secret:VAR#
    networks:
      - traefik
    environment:
      TZ: "#VAR:general_timezone:VAR#"

  # Since the login page handling of OAuth2 Proxy is based on HTTP
  # status code 401, it might conflict with an upstream reply.
  # Therefore, this helper translates an error response of OAuth2 Proxy
  # to status code 601. This prevents any conflicts.
  oauth2-proxy-helper:
    <<: *defaults
    image: docker.io/library/caddy:2
    container_name: oauth2-proxy-helper
    networks:
      - traefik
    volumes:
      - ./oauth2-proxy/helper/Caddyfile:/etc/caddy/Caddyfile
      - oauth2-proxy-helper-config:/config
      - oauth2-proxy-helper-data:/data
    environment:
      TZ: "#VAR:general_timezone:VAR#"

  # =========================
  # =       NEXTCLOUD       =
  # =========================
  nextcloud:
    <<: *defaults
    build: ./nextcloud
    container_name: nextcloud
    hostname: nextcloud
    networks:
      - nextcloud
      - traefik
    depends_on:
      nc-db:
        condition: service_healthy
    volumes:
      - "#VAR:general_path_appdata:VAR#/nextcloud/nextcloud/config:/var/www/html"
      - "#VAR:general_path_appdata:VAR#/nextcloud/nextcloud/data:/var/www/html/data"
    environment:
      TZ: "#VAR:general_timezone:VAR#"
      MYSQL_DATABASE: nextcloud
      MYSQL_USER: nextcloud
      MYSQL_PASSWORD: "#VAR:app_nextcloud_db_pass_nextcloud:VAR#"
      MYSQL_HOST: nc-db
    deploy:
      resources:
        limits:
          cpus: "6"
          memory: 8G

  nc-db:
    <<: *defaults
    # Nextcloud currently only supports up to 10.6.
    # See https://docs.nextcloud.com/server/29/admin_manual/installation/system_requirements.html
    image: docker.io/library/mariadb:10.6
    container_name: nc-db
    command: --transaction-isolation=READ-COMMITTED --log-bin=ROW --innodb-read-only-compressed=OFF
    networks:
      - nextcloud
      - backup-nc-db
    volumes:
      - "#VAR:general_path_appdata:VAR#/nextcloud/mariadb/data:/var/lib/mysql"
      - nc-db-dump:/backup
    environment:
      TZ: "#VAR:general_timezone:VAR#"
      MARIADB_ROOT_PASSWORD: "#VAR:app_nextcloud_db_pass_root:VAR#"
      MARIADB_PASSWORD: "#VAR:app_nextcloud_db_pass_nextcloud:VAR#"
      MARIADB_DATABASE: nextcloud
      MARIADB_USER: nextcloud
      MARIADB_AUTO_UPGRADE: "1"
    healthcheck: # Based on https://mariadb.com/kb/en/using-healthcheck-sh/
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 3

  # =========================
  # =       MONICA CRM      =
  # =========================
  monica:
    <<: *defaults
    image: docker.io/library/monica:4
    container_name: monica
    networks:
      - traefik
      - monica
    depends_on:
      monica-db:
        condition: service_healthy
    volumes:
      - "#VAR:general_path_appdata:VAR#/monica/monica/data:/var/www/html/storage"
    environment:
      TZ: "#VAR:general_timezone:VAR#"
      APP_DISABLE_SIGNUP: "true"
      APP_ENV: production
      APP_KEY: "#VAR:app_monica_app_key:VAR#"
      APP_URL: "https://crm.#VAR:general_domain_default:VAR#"
      DB_CONNECTION: mysql
      DB_HOST: monica-db
      DB_USERNAME: monica
      DB_PASSWORD: "#VAR:app_monica_db_pass_monica:VAR#"

  monica-db:
    <<: *defaults
    # https://github.com/monicahq/monica/blob/main/docker-compose.yml
    image: docker.io/library/mariadb:11
    container_name: monica-db
    networks:
      - monica
    volumes:
      - "#VAR:general_path_appdata:VAR#/monica/mariadb/data:/var/lib/mysql"
      - monica-db-dump:/backup
    environment:
      TZ: "#VAR:general_timezone:VAR#"
      MARIADB_ROOT_PASSWORD: "#VAR:app_monica_db_pass_root:VAR#"
      MARIADB_DATABASE: monica
      MARIADB_USER: monica
      MARIADB_PASSWORD: "#VAR:app_monica_db_pass_monica:VAR#"
      MARIADB_AUTO_UPGRADE: "1"
    healthcheck: # Based on https://mariadb.com/kb/en/using-healthcheck-sh/
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 3

  # ====================================
  # =              WIKI.JS             =
  # = https://github.com/requarks/wiki =
  # ====================================
  wikijs:
    <<: *defaults
    image: lscr.io/linuxserver/wikijs:latest
    container_name: wikijs
    networks:
      - traefik
      - wikijs
    depends_on:
      wikijs-db:
        condition: service_healthy
    volumes:
      - "#VAR:general_path_appdata:VAR#/wikijs/wikijs/config:/config"
      - "#VAR:general_path_appdata:VAR#/wikijs/wikijs/data:/data"
      - wikijs-backup:/backup
    environment:
      TZ: "#VAR:general_timezone:VAR#"
      PUID: "#VAR:ansible_real_user_id:VAR#"
      PGID: "#VAR:ansible_real_user_id:VAR#"
      DB_TYPE: postgres
      DB_HOST: wikijs-db
      DB_PORT: 5432
      DB_USER: wikijs
      DB_PASS: "#VAR:app_wikijs_db_pass:VAR#"
      DB_NAME: wikijs
    deploy:
      resources:
        limits:
          cpus: "4"
          memory: 2G

  wikijs-db:
    <<: [*defaults, *healthcheck-postgres]
    # Wiki.js supports PostgreSQL 9.5 or later and recommends latest version
    # https://docs.requarks.io/install/requirements
    image: docker.io/library/postgres:16-alpine
    container_name: wikijs-db
    networks:
      - wikijs
    volumes:
      - "#VAR:general_path_appdata:VAR#/wikijs/postgres/data:/var/lib/postgresql/data"
      - wikijs-db-dump:/backup
    environment:
      TZ: "#VAR:general_timezone:VAR#"
      POSTGRES_DB: wikijs
      POSTGRES_USER: wikijs
      POSTGRES_PASSWORD: "#VAR:app_wikijs_db_pass:VAR#"

  # =========================
  # = IMAP SAVE ATTACHMENTS =
  # =========================
  isa-fetchmail:
    <<: *defaults
    image: docker.io/jenswbe/imap-save-attachments:latest
    container_name: isa-fetchmail
    volumes:
      - ./isa/fetchmailrc:/config/.fetchmailrc
      - isa-output:/output
    environment:
      TZ: "#VAR:general_timezone:VAR#"
      CRON_SCHEDULE: "*/15 * * * *"

  isa-rclone:
    <<: *defaults
    image: docker.io/rclone/rclone:latest
    container_name: isa-rclone
    command: "move /data/ nextcloud:#VAR:app_isa_rclone_dav_path:VAR# --delete-empty-src-dirs --verbose"
    restart: "no" # Will be called by systemd timer
    volumes:
      - ./isa/rclone:/config/rclone
      - isa-output:/data
    environment:
      TZ: "#VAR:general_timezone:VAR#"

  # ===========================================================================
  # =   DEAD LINK CHECKER                                                     =
  # =   https://github.com/JenswBE/python-dead-link-checker                   =
  # ===========================================================================
  delic:
    <<: *defaults
    image: docker.io/jenswbe/dead-link-checker:latest
    container_name: delic
    volumes:
      - "./delic/config.yml:/config.yml:ro,z"
    environment:
      TZ: "#VAR:general_timezone:VAR#"

  # ===========================================================================
  # =   BJOETIEK Y                                                            =
  # ===========================================================================
  # sudo docker exec -u root bjoetiek-directus chown -R node:node /directus/uploads
  # sudo docker restart bjoetiek-directus
  bjoetiek-directus:
    <<: *defaults
    build:
      context: directus
      dockerfile: 11.Dockerfile
    container_name: bjoetiek-directus
    depends_on:
      bjoetiek-directus-db:
        condition: service_healthy
    environment:
      # See https://docs.directus.io/self-hosted/config-options#general
      # LOG_LEVEL: "trace"
      TZ: "#VAR:general_timezone:VAR#"
      KEY: "#VAR:app_bjoetiek_directus_key:VAR#"
      SECRET: "#VAR:app_bjoetiek_directus_secret:VAR#"
      DB_CLIENT: pg
      DB_HOST: bjoetiek-directus-db
      DB_PORT: "5432"
      DB_DATABASE: directus
      DB_USER: directus
      DB_PASSWORD: directus
      ADMIN_EMAIL: "#VAR:app_bjoetiek_directus_admin_email:VAR#"
      ADMIN_PASSWORD: "#VAR:app_bjoetiek_directus_admin_password:VAR#"
      PUBLIC_URL: "https://beheer.#VAR:general_domain_bjoetiek:VAR#"
      EMAIL_FROM: "beheer@#VAR:general_domain_bjoetiek:VAR#"
      EMAIL_TRANSPORT: smtp
      EMAIL_SMTP_HOST: "#VAR:mailjet_host:VAR#"
      EMAIL_SMTP_PORT: "#VAR:mailjet_port_starttls:VAR#"
      EMAIL_SMTP_USER: "#VAR:mailjet_username:VAR#"
      EMAIL_SMTP_PASSWORD: "#VAR:mailjet_password:VAR#"
      FLOWS_ENV_ALLOW_LIST: "FLOWS_ENV_GITHUB_TOKEN"
      FLOWS_ENV_GITHUB_TOKEN: "#VAR:app_bjoetiek_directus_github_token:VAR#"
    networks:
      - traefik
      - bjoetiek-directus
    volumes:
      - "#VAR:general_path_appdata:VAR#/bjoetiek/directus/uploads:/directus/uploads:z"

  bjoetiek-directus-db:
    <<: [*defaults, *healthcheck-postgres]
    # Directus supports the LTS versions of PostgreSQL
    #   - https://docs.directus.io/self-hosted/docker-guide.html#supported-databases
    #   - https://endoflife.date/postgresql (from official docs)
    image: docker.io/library/postgres:16
    container_name: bjoetiek-directus-db
    networks:
      - bjoetiek-directus
    security_opt:
      - no-new-privileges=true
    volumes:
      - "#VAR:general_path_appdata:VAR#/bjoetiek/directus/db:/var/lib/postgresql/data"
      - bjoetiek-directus-db-dump:/backup
    environment:
      TZ: "#VAR:general_timezone:VAR#"
      POSTGRES_DB: directus
      POSTGRES_USER: directus
      POSTGRES_PASSWORD: directus

  # =========================
  # =    KRISTOF COENEN     =
  # =========================
  # sudo docker exec -u root kristofcoenen-directus chown -R node:node /directus/uploads
  # sudo docker restart kristofcoenen-directus
  kristofcoenen-directus:
    <<: *defaults
    build:
      context: directus
    container_name: kristofcoenen-directus
    depends_on:
      kristofcoenen-directus-db:
        condition: service_healthy
    environment:
      # See https://docs.directus.io/self-hosted/config-options#general
      # LOG_LEVEL: "trace"
      TZ: "#VAR:general_timezone:VAR#"
      KEY: "#VAR:app_kristofcoenen_directus_key:VAR#"
      SECRET: "#VAR:app_kristofcoenen_directus_secret:VAR#"
      DB_CLIENT: pg
      DB_HOST: kristofcoenen-directus-db
      DB_PORT: "5432"
      DB_DATABASE: directus
      DB_USER: directus
      DB_PASSWORD: directus
      ADMIN_EMAIL: "#VAR:app_kristofcoenen_directus_admin_email:VAR#"
      ADMIN_PASSWORD: "#VAR:app_kristofcoenen_directus_admin_password:VAR#"
      PUBLIC_URL: "https://beheer.#VAR:general_domain_kristofcoenen:VAR#"
      EMAIL_FROM: "beheer@#VAR:general_domain_kristofcoenen:VAR#"
      EMAIL_TRANSPORT: smtp
      EMAIL_SMTP_HOST: "#VAR:mailjet_host:VAR#"
      EMAIL_SMTP_PORT: "#VAR:mailjet_port_starttls:VAR#"
      EMAIL_SMTP_USER: "#VAR:mailjet_username:VAR#"
      EMAIL_SMTP_PASSWORD: "#VAR:mailjet_password:VAR#"
      FLOWS_ENV_ALLOW_LIST: "FLOWS_ENV_GITHUB_TOKEN"
      FLOWS_ENV_GITHUB_TOKEN: "#VAR:app_kristofcoenen_directus_github_token:VAR#"
    networks:
      - traefik
      - kristofcoenen-directus
    volumes:
      - "#VAR:general_path_appdata:VAR#/kristofcoenen/directus/uploads:/directus/uploads:z"

  kristofcoenen-directus-db:
    <<: [*defaults, *healthcheck-postgres]
    # Directus supports the LTS versions of PostgreSQL
    #   - https://docs.directus.io/self-hosted/docker-guide.html#supported-databases
    #   - https://endoflife.date/postgresql (from official docs)
    image: docker.io/library/postgres:16
    container_name: kristofcoenen-directus-db
    networks:
      - kristofcoenen-directus
    security_opt:
      - no-new-privileges=true
    volumes:
      - "#VAR:general_path_appdata:VAR#/kristofcoenen/directus/db:/var/lib/postgresql/data"
      - kristofcoenen-directus-db-dump:/backup
    environment:
      TZ: "#VAR:general_timezone:VAR#"
      POSTGRES_DB: directus
      POSTGRES_USER: directus
      POSTGRES_PASSWORD: directus

  # =========================
  # =       TUINFEEST       =
  # =========================
  # sudo docker exec -u root tuinfeest-directus chown -R node:node /directus/uploads
  # sudo docker restart tuinfeest-directus
  tuinfeest-directus:
    <<: *defaults
    build:
      context: directus
    container_name: tuinfeest-directus
    depends_on:
      tuinfeest-directus-db:
        condition: service_healthy
    environment:
      # See https://docs.directus.io/self-hosted/config-options#general
      # LOG_LEVEL: "trace"
      TZ: "#VAR:general_timezone:VAR#"
      KEY: "#VAR:app_tuinfeest_directus_key:VAR#"
      SECRET: "#VAR:app_tuinfeest_directus_secret:VAR#"
      DB_CLIENT: pg
      DB_HOST: tuinfeest-directus-db
      DB_PORT: "5432"
      DB_DATABASE: directus
      DB_USER: directus
      DB_PASSWORD: directus
      ADMIN_EMAIL: "#VAR:app_tuinfeest_directus_admin_email:VAR#"
      ADMIN_PASSWORD: "#VAR:app_tuinfeest_directus_admin_password:VAR#"
      PUBLIC_URL: "https://beheer.#VAR:general_domain_tuinfeest:VAR#"
      EMAIL_FROM: "beheer@#VAR:general_domain_tuinfeest:VAR#"
      EMAIL_TRANSPORT: smtp
      EMAIL_SMTP_HOST: "#VAR:mailjet_host:VAR#"
      EMAIL_SMTP_PORT: "#VAR:mailjet_port_starttls:VAR#"
      EMAIL_SMTP_USER: "#VAR:mailjet_tuinfeest_username:VAR#"
      EMAIL_SMTP_PASSWORD: "#VAR:mailjet_tuinfeest_password:VAR#"
      FLOWS_ENV_ALLOW_LIST: "FLOWS_ENV_GITHUB_TOKEN"
      FLOWS_ENV_GITHUB_TOKEN: "#VAR:app_tuinfeest_directus_github_token:VAR#"
    networks:
      - traefik
      - tuinfeest-directus
    volumes:
      - "#VAR:general_path_appdata:VAR#/tuinfeest/directus/uploads:/directus/uploads:z"

  tuinfeest-directus-db:
    <<: [*defaults, *healthcheck-postgres]
    # Directus supports the LTS versions of PostgreSQL
    #   - https://docs.directus.io/self-hosted/docker-guide.html#supported-databases
    #   - https://endoflife.date/postgresql (from official docs)
    image: docker.io/library/postgres:16
    container_name: tuinfeest-directus-db
    networks:
      - tuinfeest-directus
    security_opt:
      - no-new-privileges=true
    volumes:
      - "#VAR:general_path_appdata:VAR#/tuinfeest/directus/db:/var/lib/postgresql/data"
      - tuinfeest-directus-db-dump:/backup
    environment:
      TZ: "#VAR:general_timezone:VAR#"
      POSTGRES_DB: directus
      POSTGRES_USER: directus
      POSTGRES_PASSWORD: directus

  # =========================
  # =      W-TECHNIEKEN     =
  # =========================
  # sudo docker exec -u root wtech-directus chown -R node:node /directus/uploads
  # sudo docker restart wtech-directus
  wtech-directus:
    <<: *defaults
    build:
      context: directus
    container_name: wtech-directus
    depends_on:
      wtech-directus-db:
        condition: service_healthy
    environment:
      # See https://docs.directus.io/self-hosted/config-options#general
      # LOG_LEVEL: "trace"
      TZ: "#VAR:general_timezone:VAR#"
      KEY: "#VAR:app_wtech_directus_key:VAR#"
      SECRET: "#VAR:app_wtech_directus_secret:VAR#"
      DB_CLIENT: pg
      DB_HOST: wtech-directus-db
      DB_PORT: "5432"
      DB_DATABASE: directus
      DB_USER: directus
      DB_PASSWORD: directus
      ADMIN_EMAIL: "#VAR:app_wtech_directus_admin_email:VAR#"
      ADMIN_PASSWORD: "#VAR:app_wtech_directus_admin_password:VAR#"
      PUBLIC_URL: "https://beheer.#VAR:general_domain_wtech:VAR#"
      EMAIL_FROM: "beheer@#VAR:general_domain_wtech:VAR#"
      EMAIL_TRANSPORT: smtp
      EMAIL_SMTP_HOST: "#VAR:mailjet_host:VAR#"
      EMAIL_SMTP_PORT: "#VAR:mailjet_port_starttls:VAR#"
      EMAIL_SMTP_USER: "#VAR:mailjet_username:VAR#"
      EMAIL_SMTP_PASSWORD: "#VAR:mailjet_password:VAR#"
      FLOWS_ENV_ALLOW_LIST: "FLOWS_ENV_GITHUB_TOKEN"
      FLOWS_ENV_GITHUB_TOKEN: "#VAR:app_wtech_directus_github_token:VAR#"
    networks:
      - traefik
      - wtech-directus
    volumes:
      - "#VAR:general_path_appdata:VAR#/wtech/directus/uploads:/directus/uploads:z"

  wtech-directus-db:
    <<: [*defaults, *healthcheck-postgres]
    # Directus supports the LTS versions of PostgreSQL
    #   - https://docs.directus.io/self-hosted/docker-guide.html#supported-databases
    #   - https://endoflife.date/postgresql (from official docs)
    image: docker.io/library/postgres:16
    container_name: wtech-directus-db
    networks:
      - wtech-directus
    security_opt:
      - no-new-privileges=true
    volumes:
      - "#VAR:general_path_appdata:VAR#/wtech/directus/db:/var/lib/postgresql/data"
      - wtech-directus-db-dump:/backup
    environment:
      TZ: "#VAR:general_timezone:VAR#"
      POSTGRES_DB: directus
      POSTGRES_USER: directus
      POSTGRES_PASSWORD: directus

  # =========================
  # =      GOAT COUNTER     =
  # =========================
  goatcounter:
    <<: *defaults
    build:
      context: goatcounter
      args:
        - "arch=#VAR:app_goatcounter_arch:VAR#"
        - "version=#VAR:app_goatcounter_version:VAR#"
    container_name: goatcounter
    user: "#VAR:ansible_real_user_id:VAR#"
    networks:
      - traefik
    volumes:
      - "#VAR:general_path_appdata:VAR#/goatcounter/db:/db"
    environment:
      TZ: "#VAR:general_timezone:VAR#"

  # =========================
  # =         UPTIME        =
  # =========================
  uptime-kuma:
    <<: *defaults
    image: docker.io/louislam/uptime-kuma:1
    container_name: uptime-kuma
    volumes:
      - "#VAR:general_path_appdata:VAR#/uptime-kuma/data:/app/data"
    networks:
      - traefik
      - uptime-kuma
    environment:
      TZ: "#VAR:general_timezone:VAR#"

  autokuma:
    <<: *defaults
    image: ghcr.io/bigboot/autokuma:latest
    container_name: autokuma
    depends_on:
      uptime-kuma:
        condition: service_started
    networks:
      - uptime-kuma
    volumes:
      - "./autokuma:/static_monitors:ro,z"
    environment:
      TZ: "#VAR:general_timezone:VAR#"
      AUTOKUMA__KUMA__URL: http://uptime-kuma:3001
      AUTOKUMA__DOCKER__ENABLED: "false"
      AUTOKUMA__STATIC_MONITORS: /static_monitors
      AUTOKUMA__DEFAULT_SETTINGS: |-
        http.max_retries: 1
        *.notification_id_list: { "1": true }

  # =========================
  # =          AUTH         =
  # =========================
  keycloak:
    <<: *defaults
    build: ./keycloak
    container_name: keycloak
    depends_on:
      keycloak-db:
        condition: service_healthy
    networks:
      - keycloak
      - traefik
    environment:
      TZ: "#VAR:general_timezone:VAR#"
      KC_DB_URL_HOST: keycloak-db
      KC_DB_URL_DATABASE: keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: "#VAR:app_keycloak_db_pass:VAR#"
      KC_DB_SCHEMA: public
      KC_HOSTNAME: "auth.#VAR:general_domain_default:VAR#"
      KC_HOSTNAME_STRICT: "false" # Hostnames validated by Traefik
      KC_PROXY_HEADERS: xforwarded
      KC_HTTP_ENABLED: "true"
      # Only for initial setup
      # KEYCLOAK_ADMIN: admin
      # KEYCLOAK_ADMIN_PASSWORD: change_me
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 4G

  keycloak-db:
    <<: [*defaults, *healthcheck-postgres]
    # https://www.keycloak.org/server/db
    image: docker.io/library/postgres:16-alpine
    container_name: keycloak-db
    networks:
      - keycloak
    volumes:
      - "#VAR:general_path_appdata:VAR#/keycloak/postgres/data:/var/lib/postgresql/data"
      - keycloak-db-dump:/backup
    environment:
      TZ: "#VAR:general_timezone:VAR#"
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: "#VAR:app_keycloak_db_pass:VAR#"

  # =========================
  # =      PLACEHOLDERS     =
  # =========================
  maintenance:
    <<: *defaults
    image: docker.io/nginxinc/nginx-unprivileged:alpine
    container_name: maintenance
    user: "#VAR:ansible_real_user_id:VAR#"
    networks:
      - traefik
    volumes:
      - "./nginx/maintenance/public:/usr/share/nginx/html:ro"
      - "./nginx/maintenance/nginx.conf:/etc/nginx/conf.d/default.conf:ro"
    environment:
      TZ: "#VAR:general_timezone:VAR#"

  wip:
    <<: *defaults
    image: docker.io/nginxinc/nginx-unprivileged:alpine
    container_name: wip
    user: "#VAR:ansible_real_user_id:VAR#"
    networks:
      - traefik
    volumes:
      - "./nginx/wip/public:/usr/share/nginx/html:ro"
      - "./nginx/wip/nginx.conf:/etc/nginx/conf.d/default.conf:ro"
    environment:
      TZ: "#VAR:general_timezone:VAR#"

  # =========================
  # =        CROWDSEC       =
  # =========================
  crowdsec:
    <<: *defaults
    image: ghcr.io/crowdsecurity/crowdsec:v1.6.3-debian
    container_name: crowdsec
    ports:
      - 127.0.0.1:9000:8080
      - "#VAR:app_wireguard[0].ip_addresses[0]:VAR#:6060:6060"
    environment:
      TZ: "#VAR:general_timezone:VAR#"
      COLLECTIONS: >-
        crowdsecurity/http-cve
        crowdsecurity/linux
        crowdsecurity/traefik
      PARSERS: >-
        crowdsecurity/nextcloud-whitelist
      GID: "#VAR:ansible_real_group_id:VAR#"
      BOUNCER_KEY_firewall: "#VAR:app_crowdsec_bouncer_firewall_key:VAR#"
    volumes:
      # Config
      - ./crowdsec/acquis.yaml:/etc/crowdsec/acquis.yaml
      - ./crowdsec/postoverflows:/etc/crowdsec/postoverflows
      - crowdsec-db:/var/lib/crowdsec/data/
      - crowdsec-config:/etc/crowdsec/
      # Logs
      - /var/log/journal:/var/log/host:ro # SSHD logs for Debian
      - traefik-access-logs:/var/log/traefik:ro

  # =========================
  # =      VAULTWARDEN      =
  # =========================
  vaultwarden:
    <<: *defaults
    image: docker.io/vaultwarden/server:latest
    container_name: vaultwarden
    networks:
      - traefik
    environment:
      TZ: "#VAR:general_timezone:VAR#"
      DOMAIN: "https://vault.#VAR:general_domain_default:VAR#"
      PASSWORD_HINTS_ALLOWED: "false"
      SIGNUPS_ALLOWED: "false"
      SMTP_HOST: "#VAR:mailjet_host:VAR#"
      SMTP_PORT: "#VAR:mailjet_port_starttls:VAR#"
      SMTP_SECURITY: starttls
      SMTP_USERNAME: "#VAR:mailjet_username:VAR#"
      SMTP_PASSWORD: "#VAR:mailjet_password:VAR#"
      SMTP_FROM: "vaultwarden@#VAR:general_domain_default:VAR#"
      SMTP_FROM_NAME: Vaultwarden
    volumes:
      - "#VAR:general_path_appdata:VAR#/vaultwarden/data:/data"

  # =========================
  # =         HOMER         =
  # =========================
  homer:
    <<: *defaults
    image: docker.io/b4bz/homer:latest
    container_name: homer
    user: "#VAR:ansible_real_user_id:VAR#"
    networks:
      - traefik
    volumes:
      - "./homer/config.yml:/www/assets/config.yml:ro"
      - "./homer/logos:/www/assets/logos:ro"
    environment:
      - "TZ=#VAR:general_timezone:VAR#"

  # =========================
  # =       PAPERLESS       =
  # =========================
  paperless:
    <<: *defaults
    container_name: paperless
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    networks:
      - traefik
      - paperless
    security_opt:
      - no-new-privileges=true
    depends_on:
      paperless-redis:
        condition: service_started
      paperless-db:
        condition: service_healthy
      paperless-gotenberg:
        condition: service_started
      paperless-tika:
        condition: service_started
    healthcheck:
      test:
        ["CMD", "curl", "-fs", "-S", "--max-time", "2", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - "#VAR:general_path_appdata:VAR#/paperless/data:/usr/src/paperless/data" # Docker container data
      - "#VAR:general_path_appdata:VAR#/paperless/docs:/usr/src/paperless/media" # Documents
      - "paperless-export:/usr/src/paperless/export" # Backup
      - "paperless-consume:/usr/src/paperless/consume" # Watch folder
    environment:
      TZ: "#VAR:general_timezone:VAR#"
      USERMAP_UID: "#VAR:ansible_real_user_id:VAR#"
      USERMAP_GID: "#VAR:ansible_real_group_id:VAR#"
      PAPERLESS_TIME_ZONE: "#VAR:general_timezone:VAR#"
      PAPERLESS_OCR_LANGUAGE: nld+eng
      PAPERLESS_OCR_LANGUAGES: eng nld
      # See:
      #   - continue_on_soft_render_error: https://docs.paperless-ngx.com/troubleshooting/#consumption-fails-with-ghostscript-pdfa-rendering-failed
      #   - invalidate_digital_signatures: https://github.com/paperless-ngx/paperless-ngx/discussions/4047
      PAPERLESS_OCR_USER_ARGS: >-
        {
          "continue_on_soft_render_error": true,
          "invalidate_digital_signatures": true
        }
      PAPERLESS_ENABLE_UPDATE_CHECK: "false"
      PAPERLESS_REDIS: redis://paperless-redis:6379
      PAPERLESS_DBHOST: paperless-db
      PAPERLESS_SECRET_KEY: "#VAR:app_paperless_secret_key:VAR#"
      PAPERLESS_FILENAME_FORMAT: "{created_year}.{created_month}.{created_day} - {correspondent} - {title}"
      PAPERLESS_URL: "https://docs.#VAR:general_domain_default:VAR#"
      PAPERLESS_TASK_WORKERS: "2"
      PAPERLESS_TIKA_ENABLED: "1"
      PAPERLESS_TIKA_GOTENBERG_ENDPOINT: http://paperless-gotenberg:3000
      PAPERLESS_TIKA_ENDPOINT: http://paperless-tika:9998
    deploy:
      resources:
        limits:
          cpus: "#VAR:ansible_processor_nproc:VAR#"
          memory: 6G

  paperless-db:
    <<: [*defaults, *healthcheck-postgres]
    container_name: paperless-db
    # See https://github.com/paperless-ngx/paperless-ngx/blob/main/docker/compose/docker-compose.postgres-tika.yml
    # for recommended version.
    image: docker.io/library/postgres:16
    networks:
      - paperless
    security_opt:
      - no-new-privileges=true
    volumes:
      - "#VAR:general_path_appdata:VAR#/paperless/db:/var/lib/postgresql/data"
      - paperless-db-dump:/backup
    environment:
      TZ: "#VAR:general_timezone:VAR#"
      POSTGRES_DB: paperless
      POSTGRES_USER: paperless
      POSTGRES_PASSWORD: paperless

  paperless-redis:
    <<: *defaults
    container_name: paperless-redis
    # See https://github.com/paperless-ngx/paperless-ngx/blob/main/docker/compose/docker-compose.postgres-tika.yml
    # for recommended version.
    image: docker.io/library/redis:7
    networks:
      - paperless
    security_opt:
      - no-new-privileges=true
    volumes:
      - paperless-redis-data:/data
    environment:
      TZ: "#VAR:general_timezone:VAR#"
      REDIS_ARGS: "--save 60 10"

  paperless-gotenberg:
    <<: *defaults
    container_name: paperless-gotenberg
    # See https://github.com/paperless-ngx/paperless-ngx/blob/main/docker/compose/docker-compose.postgres-tika.yml
    # for recommended version.
    image: docker.io/gotenberg/gotenberg:8
    networks:
      - paperless
    command:
      # The gotenberg chromium route is used to convert .eml files. We do not
      # want to allow external content like tracking pixels or even javascript.
      - "gotenberg"
      - "--chromium-disable-javascript=true"
      - "--chromium-allow-list=file:///tmp/.*"
    environment:
      TZ: "#VAR:general_timezone:VAR#"
    deploy:
      resources:
        limits:
          cpus: "#VAR:ansible_processor_nproc:VAR#"
          memory: 6G

  paperless-tika:
    <<: *defaults
    container_name: paperless-tika
    image: ghcr.io/paperless-ngx/tika:latest
    networks:
      - paperless
    environment:
      TZ: "#VAR:general_timezone:VAR#"
    deploy:
      resources:
        limits:
          cpus: "#VAR:ansible_processor_nproc:VAR#"
          memory: 6G

  # =========================
  # =  NETWORK PERFORMANCE  =
  # =========================
  netperf-blackbox-exporter:
    <<: [*defaults, *extra-hosts-wireguard]
    image: quay.io/prometheus/blackbox-exporter:latest
    container_name: netperf-blackbox-exporter
    command: --config.file=/config.yml
    environment:
      TZ: "#VAR:general_timezone:VAR#"
    volumes:
      - ./netperf/prometheus-blackbox-exporter.yml:/config.yml
    ports:
      - "#VAR:app_wireguard[0].ip_addresses[0]:VAR#:9115:9115"

  netperf-file-generator:
    <<: *defaults
    build: ./netperf/file-generator
    container_name: netperf-file-generator
    environment:
      TZ: "#VAR:general_timezone:VAR#"
    ports:
      - "#VAR:app_wireguard[0].ip_addresses[0]:VAR#:9116:8080"
    healthcheck:
      test: ["CMD", "/network-performance-file-generator", "--healthcheck"]

  # =========================
  # =       SYNCTHING       =
  # =========================
  syncthing:
    <<: *defaults
    image: docker.io/syncthing/syncthing:1
    container_name: syncthing
    hostname: "#VAR:ansible_hostname:VAR#"
    networks:
      - traefik
    ports:
      - "22000:22000"
      - "22000:22000/udp"
    volumes:
      - "#VAR:general_path_appdata:VAR#/syncthing/config:/var/syncthing"
      - "#VAR:general_path_appdata:VAR#/paperless/docs/documents/originals:/data/paperless"
      - "wikijs-backup:/data/wikijs"
    environment:
      TZ: "#VAR:general_timezone:VAR#"
      PUID: "#VAR:ansible_real_user_id:VAR#"
      PGID: "#VAR:ansible_real_user_id:VAR#"

  # =========================
  # =         BACKUP        =
  # =========================
  nc-calcardbackup:
    <<: *defaults
    image: docker.io/waja/calcardbackup:latest
    container_name: nc-calcardbackup
    networks:
      - backup-nc-db
    depends_on:
      nc-db:
        condition: service_healthy
    volumes:
      - "#VAR:general_path_appdata:VAR#/nextcloud/nextcloud/config/config:/nextcloud/config:ro"
      - nc-calcardbackup:/backup
    environment:
      TZ: "#VAR:general_timezone:VAR#"
      CRON_TIME: "#" # Disable cron, executed by SystemD timer/service
      CALCARD_OPTS: "--remove 7" # Remove files older than 7 days

  borgmatic:
    <<: *defaults
    image: ghcr.io/borgmatic-collective/borgmatic:1.8.9
    container_name: borgmatic
    privileged: true # Required for borg mount
    cap_add:
      - SYS_ADMIN # Required for borg mount
    volumes:
      # Backup locations
      - "#VAR:general_path_appdata:VAR#/bjoetiek/directus/uploads:/mnt/source/bjoetiek/directus/uploads:z"
      - "bjoetiek-directus-db-dump:/mnt/source/bjoetiek/directus/dbdump:ro"
      - "#VAR:general_path_appdata:VAR#/goatcounter/db:/mnt/source/goatcounter/db:ro"
      - "keycloak-db-dump:/mnt/source/keycloak/dbdump:ro"
      - "#VAR:general_path_appdata:VAR#/kristofcoenen/directus/uploads:/mnt/source/kristofcoenen/directus/uploads:z"
      - "kristofcoenen-directus-db-dump:/mnt/source/kristofcoenen/directus/dbdump:ro"
      - "#VAR:general_path_appdata:VAR#/monica/monica/data:/mnt/source/monica/monica/data:z"
      - "monica-db-dump:/mnt/source/monica/dbdump:ro"
      - "nc-db-dump:/mnt/source/nextcloud/dbdump:ro"
      - "nc-calcardbackup:/mnt/source/nextcloud/calcardbackup:ro"
      - "#VAR:general_path_appdata:VAR#/nextcloud/nextcloud/data:/mnt/source/nextcloud/data:ro"
      - "#VAR:general_path_appdata:VAR#/nextcloud/nextcloud/config:/mnt/source/nextcloud/config:ro"
      - "#VAR:general_path_appdata:VAR#/paperless/docs:/mnt/source/paperless/docs:ro"
      - "paperless-db-dump:/mnt/source/paperless/dbdump:ro"
      - "paperless-export:/mnt/source/paperless/export:ro"
      - "#VAR:general_path_appdata:VAR#/tuinfeest/directus/uploads:/mnt/source/tuinfeest/directus/uploads:z"
      - "tuinfeest-directus-db-dump:/mnt/source/tuinfeest/directus/dbdump:ro"
      - "#VAR:general_path_appdata:VAR#/uptime-kuma/data:/mnt/source/uptime-kuma/data:ro"
      - "#VAR:general_path_appdata:VAR#/vaultwarden/data:/mnt/source/vaultwarden/data:ro"
      - "wikijs-backup:/mnt/source/wikijs/backup:ro"
      - "wikijs-db-dump:/mnt/source/wikijs/dbdump:ro"
      - "#VAR:general_path_appdata:VAR#/wtech/directus/uploads:/mnt/source/wtech/directus/uploads:z"
      - "wtech-directus-db-dump:/mnt/source/wtech/directus/dbdump:ro"
      # Config and cache
      - "./borgmatic/borgmatic.d/config.yaml:/etc/borgmatic.d/config.yaml"
      - "./borgmatic/ssh/BorgHost:/root/.ssh/BorgHost"
      - "./borgmatic/ssh/known_hosts:/root/.ssh/known_hosts"
      - "#VAR:general_path_appdata:VAR#/borgmatic/borgmatic/config:/root/.config/borg"
      - "#VAR:general_path_appdata:VAR#/borgmatic/borgmatic/cache:/root/.cache/borg"
      - "#VAR:general_path_appdata:VAR#/borgmatic/borgmatic/restore:/mnt/restore"
    devices:
      - "/dev/fuse:/dev/fuse" # Required for borg mount
    environment:
      TZ: "#VAR:general_timezone:VAR#"
      BACKUP_CRON: "0 3 * * *"
      BORG_PASSPHRASE: "#VAR:app_borgmatic_borg_passphrase:VAR#"
      BORG_HOSTNAME_IS_UNIQUE: "yes" # Automatically removes stale locks
      BORG_HOST_ID: "#VAR:ansible_hostname:VAR#"
    deploy:
      resources:
        limits:
          cpus: "#VAR:ansible_processor_nproc:VAR#"
          memory: 6G

# #################################################################
# #                            VOLUMES                            #
# #################################################################
volumes:
  bjoetiek-directus-db-dump:
  crowdsec-config:
  crowdsec-db:
  isa-output:
  keycloak-db-dump:
  kristofcoenen-directus-db-dump:
  monica-db-dump:
  nc-calcardbackup:
  nc-db-dump:
  oauth2-proxy-helper-config:
  oauth2-proxy-helper-data:
  paperless-consume:
  paperless-db-dump:
  paperless-export:
  paperless-redis-data:
  traefik-access-logs:
  traefik-cert:
  tuinfeest-directus-db-dump:
  wikijs-backup:
  wikijs-db-dump:
  wtech-directus-db-dump:

# #################################################################
# #                            NETWORKS                           #
# #################################################################
networks:
  bjoetiek-directus:
    name: bjoetiek-directus

  backup-nc-db:
    name: backup-nc-db

  keycloak:
    name: keycloak

  kristofcoenen-directus:
    name: kristofcoenen-directus

  monica:
    name: monica

  nextcloud:
    name: nextcloud

  paperless:
    name: paperless

  traefik:
    name: traefik

  tuinfeest-directus:
    name: tuinfeest-directus

  uptime-kuma:
    name: uptime-kuma
    internal: true

  wikijs:
    name: wikijs

  wtech-directus:
    name: wtech-directus
