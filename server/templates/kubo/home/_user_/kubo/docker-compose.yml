#################################################################
#                    DEFAULTS AND COMMON ENVS                   #
#################################################################
x-defaults: &defaults
  restart: always
  extra_hosts:
    - "host.docker.internal:host-gateway"
  deploy:
    resources:
      limits:
        cpus: "2"
        memory: 512M

x-glitchtip-env: &glitchtip-env
  TZ: "{{ general_timezone }}"
  PORT: "8080"
  DATABASE_URL: "postgres://glitchtip:{{ app_glitchtip_db_pass }}@glitchtip-db:5432/glitchtip"
  REDIS_HOST: "glitchtip-redis"
  SECRET_KEY: "{{ app_glitchtip_secret_key }}"
  EMAIL_URL: "smtp://{{ mailjet_username }}:{{ mailjet_password }}@{{ mailjet_host }}:{{ mailjet_port_starttls }}"
  DEFAULT_FROM_EMAIL: "glitchtip@{{ general_domain_default }}"
  GLITCHTIP_DOMAIN: "https://glitchtip.{{ general_domain_default }}"

x-librenms-env: &librenms-env
  TZ: "{{ general_timezone }}"
  PUID: "{{ ansible_real_user_id }}"
  PGID: "{{ ansible_real_group_id }}"
  DB_HOST: "librenms-db"
  DB_NAME: "librenms"
  DB_USER: "librenms"
  DB_PASSWORD: "{{ app_librenms_db_pass_librenms }}"
  DB_TIMEOUT: "60"
  REDIS_HOST: "librenms-redis"
  REDIS_PORT: "6379"
  REDIS_DB: "0"
  MEMORY_LIMIT: "256M"
  UPLOAD_MAX_SIZE: "16M"
  OPCACHE_MEM_SIZE: "128"
  REAL_IP_FROM: "172.16.0.0/12"
  REAL_IP_HEADER: "X-Forwarded-For"
  LOG_IP_VAR: "http_x_forwarded_for"
  LIBRENMS_SNMP_COMMUNITY: "librenmsdocker"
  MEMCACHED_HOST: "librenms-memcached"
  MEMCACHED_PORT: "11211"
  LIBRENMS_WEATHERMAP: "false"
  LIBRENMS_WEATHERMAP_SCHEDULE: "*/5 * * * *"

#################################################################
#                            SERVICES                           #
#################################################################
services:
  # =========================
  # =         PROXY         =
  # =========================
  # Having 2 Traefik instances (1 on host network and 1 on bridge network)
  # allows to have the real client IP's available inside the bridged
  # Treafik instance (using PROXY protocol). In case you would only have
  # a single instance on the host network, you would loose all the convenience
  # of the Docker provider support (not having to expose each service on a host
  # port and auto-configuration of the services/loadbalancers).
  traefik-host:
    <<: *defaults
    image: docker.io/library/traefik:latest
    container_name: traefik-host
    network_mode: host
    command:
      # - "--log.level=DEBUG"
      - "--providers.file.directory=/conf"
      - "--providers.file.watch=true"
      - "--entrypoints.tcp80.address=:80"
      - "--entrypoints.tcp443.address=:443"
      - "--entrypoints.webinternal.address=:8100"
    volumes:
      - ./traefik/host:/conf:ro

  traefik:
    <<: *defaults
    image: docker.io/library/traefik:latest
    container_name: traefik
    command:
      # - "--log.level=DEBUG"
      - "--accesslog.filepath=/access-logs/access.log" # Used by CrowdSec
      - "--providers.file.directory=/conf"
      - "--providers.file.watch=true"
      - "--providers.docker=true"
      - "--providers.docker.network=traefik"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.proxyProtocol.trustedIPs={{ network_any_private }}"
      - "--entrypoints.websecure.http.middlewares=secure-https@file"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.proxyProtocol.trustedIPs={{ network_any_private }}"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--certificatesresolvers.le-tls.acme.tlsChallenge=true"
      - "--certificatesresolvers.le-tls.acme.email={{ general_mail_admin }}@{{ general_domain_default }}"
      - "--certificatesresolvers.le-tls.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.le-tls-staging.acme.tlsChallenge=true"
      - "--certificatesresolvers.le-tls-staging.acme.email={{ general_mail_admin }}@{{ general_domain_default }}"
      - "--certificatesresolvers.le-tls-staging.acme.storage=/letsencrypt/acme-staging.json"
      - "--certificatesResolvers.le-tls-staging.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--api=true"
      - "--ping.manualrouting=true"
    ports:
      - 127.0.0.1:2080:80
      - 127.0.0.1:2443:443
    networks:
      - traefik
    volumes:
      - ./traefik/bridge:/conf:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-cert:/letsencrypt
      - traefik-access-logs:/access-logs
    environment:
      TZ: "{{ general_timezone }}"

  traefik-forward-auth:
    <<: *defaults
    image: docker.io/thomseddon/traefik-forward-auth:2
    container_name: traefik-forward-auth
    networks:
      - traefik
    environment:
      TZ: "{{ general_timezone }}"
      COOKIE_DOMAIN: "{{ general_domain_default }}"
      DEFAULT_PROVIDER: "oidc"
      SECRET: "{{ app_traefik_forward_auth_secret }}"
      PROVIDERS_OIDC_ISSUER_URL: "{{ app_traefik_forward_auth_oidc_issuer_url }}"
      PROVIDERS_OIDC_CLIENT_ID: "{{ app_traefik_forward_auth_oidc_client_id }}"
      PROVIDERS_OIDC_CLIENT_SECRET: "{{ app_traefik_forward_auth_oidc_client_secret }}"

  # =========================
  # =    UNIFI CONTROLLER   =
  # =========================
  unifi-controller:
    <<: *defaults
    image: docker.io/linuxserver/unifi-controller:latest
    container_name: unifi-controller
    environment:
      TZ: "{{ general_timezone }}"
      PUID: "1000"
      PGID: "1000"
      MEM_LIMIT: "512M"
    volumes:
      - "{{ general_path_appdata }}/unifi-controller/config:/config"
    ports:
      - "3478:3478/udp"
      - "10001:10001/udp"
      - "8080:8080"
      - "8081:8081"
      - "8443:8443"
      - "8843:8843"
      - "8880:8880"
      - "6789:6789"

  # =========================
  # =    HOME AUTOMATION    =
  # =========================
  ha:
    <<: *defaults
    image: docker.io/homeassistant/home-assistant:stable
    container_name: ha
    networks:
      - traefik
      - home-automation
    volumes:
      - "./home-automation/home-assistant/automations.yaml:/config/automations.yaml"
      - "./home-automation/home-assistant/configuration.yaml:/config/configuration.yaml"
      - "{{ general_path_appdata }}/home-automation/home-assistant/config:/config"
    environment:
      TZ: "{{ general_timezone }}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ha.entrypoints=websecure"
      - "traefik.http.routers.ha.rule=Host(`ha.{{ general_domain_local }}`)"
      - "traefik.http.routers.ha.tls=true"
      - "traefik.http.services.ha-{{ ansible_hostname }}.loadbalancer.server.port=8123"

  ha-zigbee2mqtt:
    <<: *defaults
    image: docker.io/koenkk/zigbee2mqtt:latest
    container_name: ha-zigbee2mqtt
    networks:
      - home-automation
    depends_on:
      - ha-mosquitto
    volumes:
      - "{{ general_path_appdata }}/home-automation/zigbee2mqtt:/app/data"
      - "./home-automation/zigbee2mqtt/configuration.yaml:/app/data/configuration.yaml"
    devices:
      - "/dev/serial/by-id/usb-Silicon_Labs_slae.sh_cc2652rb_stick_-_slaesh_s_iot_stuff_00_12_4B_00_22_98_86_5C-if00-port0:/dev/zigbee"
    environment:
      TZ: "{{ general_timezone }}"

  ha-mosquitto:
    <<: *defaults
    image: docker.io/library/eclipse-mosquitto:latest
    container_name: ha-mosquitto
    networks:
      - home-automation
    volumes:
      - "./home-automation/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro"
      - "ha-mosquitto-data:/mosquitto/data/"
    environment:
      TZ: "{{ general_timezone }}"

  # =========================
  # =        MINIFLUX       =
  # =========================
  miniflux:
    <<: *defaults
    image: docker.io/miniflux/miniflux:latest
    container_name: miniflux
    networks:
      - traefik
      - miniflux
    depends_on:
      - miniflux-db
    environment:
      TZ: "{{ general_timezone }}"
      DATABASE_URL: "postgres://miniflux:{{ app_miniflux_db_pass }}@miniflux-db/miniflux?sslmode=disable"
      RUN_MIGRATIONS: "1"
      CREATE_ADMIN: "1"
      ADMIN_USERNAME: "{{ app_miniflux_admin_user }}"
      ADMIN_PASSWORD: "{{ app_miniflux_admin_pass }}"
      OAUTH2_PROVIDER: "oidc"
      OAUTH2_OIDC_DISCOVERY_ENDPOINT: "{{ app_miniflux_oidc_url }}"
      OAUTH2_CLIENT_ID: "{{ app_miniflux_oidc_client_id }}"
      OAUTH2_CLIENT_SECRET: "{{ app_miniflux_oidc_client_secret }}"
      OAUTH2_REDIRECT_URL: "https://feed.{{ general_domain_default }}/oauth2/oidc/callback"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.miniflux.entrypoints=websecure"
      - "traefik.http.routers.miniflux.rule=Host(`feed.{{ general_domain_default }}`)"
      - "traefik.http.routers.miniflux.tls.certresolver=le-tls"
      - "traefik.http.services.miniflux-{{ ansible_hostname }}.loadbalancer.server.port=8080"

  miniflux-db:
    <<: *defaults
    image: docker.io/library/postgres:13-alpine
    container_name: miniflux-db
    networks:
      - miniflux
    volumes:
      - "{{ general_path_appdata }}/miniflux/db:/var/lib/postgresql/data"
      - "miniflux-db-dump:/backup"
    environment:
      TZ: "{{ general_timezone }}"
      POSTGRES_USER: "miniflux"
      POSTGRES_PASSWORD: "{{ app_miniflux_db_pass }}"

  # =========================
  # =       MULTIMEDIA      =
  # =========================
  plex:
    <<: *defaults
    image: docker.io/plexinc/pms-docker:latest
    container_name: plex
    network_mode: host
    volumes:
      - "/data/bulk/media:/data/media"
      - "/data/important/Photos:/data/Photos"
      - "{{ general_path_appdata }}/plex/config:/config"
      - "{{ general_path_appdata }}/plex/transcode:/transcode"
    # devices: # for QuickSync support
    #   - "/dev/dri/card0:/dev/dri/card0"
    #   - "/dev/dri/renderD128:/dev/dri/renderD128"
    environment:
      TZ: "{{ general_timezone }}"
      PLEX_UID: "{{ ansible_real_user_id }}"
      PLEX_GID: "{{ ansible_real_group_id }}"
    deploy:
      resources:
        limits:
          cpus: "7"
          memory: 4G

  jellyfin:
    <<: *defaults
    image: docker.io/jellyfin/jellyfin:latest
    container_name: jellyfin
    user: "{{ ansible_real_user_id }}:{{ ansible_real_group_id }}"
    group_add: # By id as these may not exist within the container. Needed to provide permissions to the VAAPI Devices
      - "107" # Group "render"
      - "44" # Group "video"
    devices:
      # VAAPI Devices
      - /dev/dri/renderD128:/dev/dri/renderD128
      - /dev/dri/card0:/dev/dri/card0
    networks:
      - traefik
    ports:
      - "8096:8096"
    volumes:
      - "/data/bulk/media:/media"
      - "/data/important/Photos:/Photos"
      - "{{ general_path_appdata }}/jellyfin/config:/config"
      - "{{ general_path_appdata }}/jellyfin/cache:/cache"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jellyfin.entrypoints=websecure"
      - "traefik.http.routers.jellyfin.rule=Host(`jellyfin.{{ general_domain_default }}`)"
      - "traefik.http.routers.jellyfin.tls.certresolver=le-tls"
      - "traefik.http.services.jellyfin-{{ ansible_hostname }}.loadbalancer.server.port=8096"
    deploy:
      resources:
        limits:
          cpus: "7"
          memory: 4G

  # =========================
  # =   TINY MEDIA MANAGER  =
  # =========================
  tmm:
    <<: *defaults
    image: docker.io/romancin/tinymediamanager:latest
    container_name: tmm
    networks:
      - traefik
    volumes:
      - "/data/bulk/media:/media"
      - "{{ general_path_appdata }}/tmm/config:/config"
    environment:
      TZ: "{{ general_timezone }}"
      GROUP_ID: "0"
      USER_ID: "0"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tmm.entrypoints=websecure"
      - "traefik.http.routers.tmm.rule=Host(`tmm.{{ general_domain_default }}`)"
      - "traefik.http.routers.tmm.tls.certresolver=le-tls"
      - "traefik.http.routers.tmm.middlewares=forward-auth@file"
      - "traefik.http.services.tmm-{{ ansible_hostname }}.loadbalancer.server.port=5800"
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 2G

  # =========================
  # =       SYNCTHING       =
  # =========================
  syncthing:
    <<: *defaults
    image: docker.io/syncthing/syncthing:1
    container_name: syncthing
    hostname: "{{ ansible_hostname }}"
    networks:
      - traefik
    ports:
      - "22000:22000"
    volumes:
      - "{{ general_path_appdata }}/syncthing/config:/var/syncthing"
      - "/data/bulk/media/Music:/data/music"
    environment:
      TZ: "{{ general_timezone }}"
      PUID: "1000"
      PGID: "1000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.syncthing.entrypoints=websecure"
      - "traefik.http.routers.syncthing.rule=Host(`syncthing-{{ ansible_hostname }}.{{ general_domain_default }}`)"
      - "traefik.http.routers.syncthing.tls.certresolver=le-tls"
      - "traefik.http.services.syncthing-{{ ansible_hostname }}.loadbalancer.server.port=8384"

  # =========================
  # =         SAMBA         =
  # =========================
  samba:
    <<: *defaults
    image: docker.io/dperson/samba:latest
    container_name: samba
    ports:
      - "445:445"
    volumes:
      - "/data/bulk/ps2-roms:/data/ps2"
    environment:
      TZ: "{{ general_timezone }}"
      USERID: "{{ ansible_real_user_id }}"
      GROUPID: "{{ ansible_real_group_id }}"
    command: >
      samba.sh -S
      -s "ps2;/data/ps2;yes;no;yes"

  # =========================
  # =          NFS          =
  # =========================
  nfs:
    <<: *defaults
    image: docker.io/erichough/nfs-server:latest
    container_name: nfs
    privileged: true # Required for mount several filesystems inside the container to support its operation
    ports:
      - "111:111"
      - "111:111/udp"
      - "2049:2049"
      - "2049:2049/udp"
      - "32765:32765"
      - "32765:32765/udp"
      - "32767:32767"
      - "32767:32767/udp"
    volumes:
      - "/data/bulk/media:/data/media"
      - "/data/important/Photos:/data/photos"
      - "./nfs/exports:/etc/exports:ro"
    environment:
      TZ: "{{ general_timezone }}"

  # =========================
  # =       NEXTCLOUD       =
  # =========================
  nextcloud:
    <<: *defaults
    build: ./nextcloud
    container_name: nextcloud
    hostname: nextcloud
    networks:
      - traefik
      - nextcloud
    depends_on:
      - nc-db
    volumes:
      - "{{ general_path_appdata }}/nextcloud/nextcloud/config:/var/www/html"
      - "{{ general_path_appdata }}/nextcloud/nextcloud/data:/var/www/html/data"
    environment:
      TZ: "{{ general_timezone }}"
      MYSQL_DATABASE: "nextcloud"
      MYSQL_USER: "nextcloud"
      MYSQL_PASSWORD: "{{ app_nextcloud_db_pass_nextcloud }}"
      MYSQL_HOST: "nc-db"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nextcloud.entrypoints=websecure"
      - "traefik.http.routers.nextcloud.rule=Host(`nextcloud-media.{{ general_domain_default }}`)"
      - "traefik.http.routers.nextcloud.tls.certresolver=le-tls"
      - "traefik.http.routers.nextcloud.middlewares=nextcloud-redirect-dav@file, nextcloud-redirect-webfinger@file"
    deploy:
      resources:
        limits:
          cpus: "7"
          memory: 4G

  nc-db:
    <<: *defaults
    image: docker.io/library/mariadb:10.11
    command: --transaction-isolation=READ-COMMITTED --log-bin=ROW --innodb-read-only-compressed=OFF
    container_name: nc-db
    networks:
      - nextcloud
    volumes:
      - "{{ general_path_appdata }}/nextcloud/mariadb/data:/var/lib/mysql"
      - nc-db-dump:/backup
    environment:
      TZ: "{{ general_timezone }}"
      MYSQL_ROOT_PASSWORD: "{{ app_nextcloud_db_pass_root }}"
      MYSQL_PASSWORD: "{{ app_nextcloud_db_pass_nextcloud }}"
      MYSQL_DATABASE: "nextcloud"
      MYSQL_USER: "nextcloud"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "mysqladmin -u $$MYSQL_USER --password=$$MYSQL_PASSWORD ping || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 5

  # =========================
  # =         NGINX         =
  # =========================
  nginx-hetvleermuizenkind:
    <<: *defaults
    image: docker.io/library/nginx:latest
    container_name: nginx-hetvleermuizenkind
    networks:
      - traefik
    volumes:
      - "{{ general_path_appdata }}/nginx/hetvleermuizenkind:/usr/share/nginx/html"
    environment:
      TZ: "{{ general_timezone }}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx-hetvleermuizenkind.entrypoints=websecure"
      - "traefik.http.routers.nginx-hetvleermuizenkind.rule=Host(`hetvleermuizenkind.{{ general_domain_default }}`)"
      - "traefik.http.routers.nginx-hetvleermuizenkind.tls.certresolver=le-tls"

  # =========================
  # =     ERROR LOGGING     =
  # =========================
  # Go to GlitchTip url /register to create first user
  glitchtip:
    <<: *defaults
    image: docker.io/glitchtip/glitchtip:latest
    container_name: glitchtip
    hostname: "glitchtip.{{ general_domain_default }}" # Prevents unvalidated sender in Mailjet
    depends_on:
      - glitchtip-db
      - glitchtip-redis
    networks:
      - traefik
      - glitchtip
    environment:
      <<: *glitchtip-env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.glitchtip.entrypoints=websecure"
      - "traefik.http.routers.glitchtip.rule=Host(`glitchtip.{{ general_domain_default }}`)"
      - "traefik.http.routers.glitchtip.tls.certresolver=le-tls"
      - "traefik.http.services.glitchtip-{{ ansible_hostname }}.loadbalancer.server.port=8080"

  glitchtip-worker:
    <<: *defaults
    image: docker.io/glitchtip/glitchtip:latest
    container_name: glitchtip-worker
    command: celery -A glitchtip worker -B -l INFO
    hostname: "glitchtip.{{ general_domain_default }}" # Prevents unvalidated sender in Mailjet
    depends_on:
      - glitchtip-db
      - glitchtip-redis
    networks:
      - glitchtip
    environment:
      <<: *glitchtip-env
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 2G

  glitchtip-migrate:
    <<: *defaults
    image: docker.io/glitchtip/glitchtip:latest
    container_name: glitchtip-migrate
    hostname: "glitchtip.{{ general_domain_default }}" # Prevents unvalidated sender in Mailjet
    restart: "no" # Only run on "docker compose up"
    depends_on:
      - glitchtip-db
      - glitchtip-redis
    command: "./manage.py migrate"
    networks:
      - glitchtip
    environment:
      <<: *glitchtip-env

  glitchtip-db:
    <<: *defaults
    image: docker.io/library/postgres:13-alpine
    container_name: glitchtip-db
    networks:
      - glitchtip
    volumes:
      - "{{ general_path_appdata }}/glitchtip/db:/var/lib/postgresql/data"
      - "glitchtip-db-dump:/backup"
    environment:
      TZ: "{{ general_timezone }}"
      POSTGRES_USER: "glitchtip"
      POSTGRES_PASSWORD: "{{ app_glitchtip_db_pass }}"
      POSTGRES_DB: "glitchtip"

  glitchtip-redis:
    <<: *defaults
    image: docker.io/library/redis:latest
    container_name: glitchtip-redis
    networks:
      - glitchtip
    environment:
      TZ: "{{ general_timezone }}"

  # =========================
  # =       MONITORING      =
  # =========================
  # scrutiny:
  #   <<: *defaults
  #   image: docker.io/ghcr.io/analogj/scrutiny:master-omnibus
  #   container_name: scrutiny
  #   cap_add:
  #     - SYS_RAWIO # Required for querying SMART data
  #     - SYS_ADMIN # Required for querying NVMe drives
  #   volumes:
  #     - "./scrutiny:/opt/scrutiny/config"
  #     - "scrutiny-sqlite:/opt/scrutiny/sqlite"
  #     - "scrutiny-influxdb:/opt/scrutiny/influxdb"
  #     - "/run/udev:/run/udev:ro"
  #   devices:
  #     - "/dev/nvme0:/dev/nvme0"
  #     - "/dev/sda:/dev/sda"
  #     - "/dev/sdb:/dev/sdb"
  #     - "/dev/sdc:/dev/sdc"
  #     - "/dev/sdd:/dev/sdd"
  #   networks:
  #     - traefik
  #   environment:
  #     TZ: "{{ general_timezone }}"
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.scrutiny.entrypoints=websecure"
  #     - "traefik.http.routers.scrutiny.rule=Host(`smart-{{ ansible_hostname }}.{{ general_domain_default }}`)"
  #     - "traefik.http.routers.scrutiny.tls.certresolver=le-tls"
  #     - "traefik.http.routers.scrutiny.middlewares=forward-auth@file"

  graylog:
    <<: *defaults
    image: docker.io/graylog/graylog:4.3
    container_name: graylog
    entrypoint: /usr/bin/tini -- wait-for-it graylog-elasticsearch:9200 --  /docker-entrypoint.sh
    volumes:
      # WARNING: ElasticSearch expects the data folder been owned by 1100:1100!
      - "{{ general_path_appdata }}/graylog/graylog/config:/usr/share/graylog/config"
      - "{{ general_path_appdata }}/graylog/graylog/journal:/usr/share/graylog/journal"
    networks:
      - traefik
      - graylog
    ports:
      - 1514:1514 # Syslog TCP
      - 1514:1514/udp # Syslog UDP
      - 12201:12201 # GELF TCP
      - 12201:12201/udp # GELF UDP
    environment:
      TZ: "{{ general_timezone }}"
      GRAYLOG_PASSWORD_SECRET: "{{ app_graylog_secret }}"
      GRAYLOG_ROOT_PASSWORD_SHA2: "{{ app_graylog_admin_password | hash('sha256') }}"
      GRAYLOG_HTTP_EXTERNAL_URI: "https://logs.{{ general_domain_default }}/"
      GRAYLOG_ELASTICSEARCH_HOSTS: http://graylog-elasticsearch:9200
      GRAYLOG_MONGODB_URI: mongodb://graylog-mongodb/graylog
    depends_on:
      - graylog-mongodb
      - graylog-elasticsearch
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.graylog.entrypoints=websecure"
      - "traefik.http.routers.graylog.rule=Host(`logs.{{ general_domain_default }}`)"
      - "traefik.http.routers.graylog.tls.certresolver=le-tls"
      - "traefik.http.services.graylog-{{ ansible_hostname }}.loadbalancer.server.port=9000"
    deploy:
      resources:
        limits:
          cpus: "4"
          memory: 4G

  graylog-elasticsearch:
    <<: *defaults
    image: docker.io/docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.2
    container_name: graylog-elasticsearch
    environment:
      TZ: "{{ general_timezone }}"
      http.host: "0.0.0.0"
      transport.host: localhost
      network.host: "0.0.0.0"
      ES_JAVA_OPTS: -Dlog4j2.formatMsgNoLookups=true -Xms512m -Xmx512m
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - graylog
    volumes:
      # WARNING: ElasticSearch expects the data folder been owned by 1000:1000!
      - "{{ general_path_appdata }}/graylog/elasticsearch/data:/usr/share/elasticsearch/data"
    deploy:
      resources:
        limits:
          cpus: "4"
          memory: 4G

  graylog-mongodb:
    <<: *defaults
    image: docker.io/library/mongo:4.2
    container_name: graylog-mongodb
    environment:
      TZ: "{{ general_timezone }}"
    networks:
      - graylog
    volumes:
      - "{{ general_path_appdata }}/graylog/mongodb/data:/data/db"

  librenms:
    <<: *defaults
    image: docker.io/librenms/librenms:latest
    container_name: librenms
    hostname: librenms
    cap_add:
      - NET_ADMIN
      - NET_RAW
    depends_on:
      - librenms-db
      - librenms-memcached
      - librenms-msmtpd
    volumes:
      - "{{ general_path_appdata }}/librenms/librenms/data:/data"
      - "./librenms/config:/data/config"
      - "./librenms/templates:/data/alert-templates/"
    networks:
      - traefik
      - librenms
    environment:
      <<: *librenms-env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.librenms.entrypoints=websecure"
      - "traefik.http.routers.librenms.rule=Host(`librenms.{{ general_domain_default }}`)"
      - "traefik.http.routers.librenms.tls.certresolver=le-tls"
      - "traefik.http.services.librenms-{{ ansible_hostname }}.loadbalancer.server.port=8000"

  librenms-dispatcher:
    <<: *defaults
    image: docker.io/librenms/librenms:latest
    container_name: librenms-dispatcher
    hostname: librenms-dispatcher
    cap_add:
      - NET_ADMIN
      - NET_RAW
    depends_on:
      - librenms
      - librenms-redis
    networks:
      - librenms
    volumes:
      - "{{ general_path_appdata }}/librenms/librenms/data:/data"
    environment:
      <<: *librenms-env
      DISPATCHER_NODE_ID: "dispatcher1"
      SIDECAR_DISPATCHER: "1"

  librenms-snmptrapd:
    <<: *defaults
    image: docker.io/librenms/librenms:latest
    container_name: librenms-snmptrapd
    hostname: librenms-snmptrapd
    cap_add:
      - NET_ADMIN
      - NET_RAW
    depends_on:
      - librenms
    networks:
      - librenms
    ports:
      - "162:162"
      - "162:162/udp"
    volumes:
      - "{{ general_path_appdata }}/librenms/librenms/data:/data"
    environment:
      <<: *librenms-env
      SIDECAR_SNMPTRAPD: "1"

  librenms-db:
    <<: *defaults
    image: docker.io/library/mariadb:10.11
    container_name: librenms-db
    command:
      - "mysqld"
      - "--innodb-file-per-table=1"
      - "--lower-case-table-names=0"
      - "--character-set-server=utf8mb4"
      - "--collation-server=utf8mb4_unicode_ci"
    networks:
      - librenms
    volumes:
      - "{{ general_path_appdata }}/librenms/mariadb/data:/var/lib/mysql"
      - librenms-db-dump:/backup
    environment:
      TZ: "{{ general_timezone }}"
      MYSQL_DATABASE: "librenms"
      MYSQL_USER: "librenms"
      MYSQL_ROOT_PASSWORD: "{{ app_librenms_db_pass_root }}"
      MYSQL_PASSWORD: "{{ app_librenms_db_pass_librenms }}"

  librenms-memcached:
    <<: *defaults
    image: docker.io/library/memcached:alpine
    container_name: librenms-memcached
    networks:
      - librenms
    environment:
      TZ: "{{ general_timezone }}"

  librenms-redis:
    <<: *defaults
    image: docker.io/library/redis:5.0-alpine
    container_name: librenms-redis
    networks:
      - librenms
    environment:
      TZ: "{{ general_timezone }}"

  librenms-msmtpd:
    <<: *defaults
    image: docker.io/crazymax/msmtpd:latest
    container_name: librenms-msmtpd
    networks:
      - librenms
    environment:
      TZ: "{{ general_timezone }}"
      SMTP_HOST: "{{ mailjet_host }}"
      SMTP_PORT: "{{ mailjet_port_starttls }}"
      SMTP_TLS: "on"
      SMTP_STARTTLS: "on"
      SMTP_TLS_CHECKCERT: "on"
      SMTP_AUTH: "on"
      SMTP_USER: "{{ mailjet_username }}"
      SMTP_PASSWORD: "{{ mailjet_password }}"
      SMTP_FROM: "librenms@{{ general_domain_default }}"

  # =========================
  # =        CROWDSEC       =
  # =========================
  crowdsec:
    <<: *defaults
    image: docker.io/crowdsecurity/crowdsec:{{ crowdsec_version }}
    container_name: crowdsec
    ports:
      - 127.0.0.1:9000:8080
    environment:
      TZ: "{{ general_timezone }}"
      COLLECTIONS: >-
        crowdsecurity/http-cve
        crowdsecurity/linux
        crowdsecurity/traefik
      GID: "{{ ansible_real_group_id }}"
      BOUNCER_KEY_firewall: "{{ app_crowdsec_bouncer_firewall_key }}"
    volumes:
      # Config
      - ./crowdsec/acquis.yaml:/etc/crowdsec/acquis.yaml
      - crowdsec-db:/var/lib/crowdsec/data/
      - crowdsec-config:/etc/crowdsec/
      # Logs
      - /var/log/auth.log:/var/log/auth.log:ro
      - traefik-access-logs:/var/log/traefik:ro

  # =========================
  # =         BACKUP        =
  # =========================
  github-backup:
    <<: *defaults
    image: docker.io/jenswbe/github-backup:latest
    container_name: github-backup
    restart: "no" # Will be called by systemd timer
    volumes:
      - ./github-backup/config.yml:/config.yml
      - github-backup:/backup
    environment:
      - "TZ={{ general_timezone }}"

  borgmatic:
    <<: *defaults
    image: docker.io/b3vis/borgmatic:latest
    container_name: borgmatic
    privileged: true # Required for borg mount
    cap_add:
      - SYS_ADMIN # Required for borg mount
    volumes:
      # Backup locations
      - "github-backup:/mnt/source/github-backup/backup:ro"
      - "glitchtip-db-dump:/mnt/source/glitchtip/dbdump:ro"
      - "{{ general_path_appdata }}/home-automation/home-assistant/config:/mnt/source/home-automation/home-assistant/config:ro"
      - "librenms-db-dump:/mnt/source/librenms/dbdump:ro"
      - "miniflux-db-dump:/mnt/source/miniflux/dbdump:ro"
      - "nc-db-dump:/mnt/source/nextcloud/dbdump:ro"
      - "{{ general_path_appdata }}/nextcloud/nextcloud/data:/mnt/source/nextcloud/data:ro"
      - "{{ general_path_appdata }}/nextcloud/nextcloud/config:/mnt/source/nextcloud/config:ro"
      - "/data/important/Photos:/mnt/source/plex/photos:ro"
      - "/data/bulk/media/Music:/mnt/source/plex/music:ro"
      # Config and cache
      - "./borgmatic/borgmatic.d:/etc/borgmatic.d"
      - "./borgmatic/ssh:/root/.ssh"
      - "{{ general_path_appdata }}/borgmatic/borgmatic/config:/root/.config/borg"
      - "{{ general_path_appdata }}/borgmatic/borgmatic/cache:/root/.cache/borg"
      - "{{ general_path_appdata }}/borgmatic/borgmatic/restore:/mnt/restore"
    devices:
      - "/dev/fuse:/dev/fuse" # Required for borg mount
    environment:
      TZ: "{{ general_timezone }}"
      BORG_PASSPHRASE: "{{ app_borgmatic_borg_passphrase }}"
      BORG_HOSTNAME_IS_UNIQUE: "yes" # Automatically removes stale locks
      BORG_HOST_ID: "{{ ansible_hostname }}"
    deploy:
      resources:
        limits:
          cpus: "4"
          memory: 4G

#################################################################
#                            NETWORKS                           #
#################################################################
networks:
  glitchtip:
    name: glitchtip

  graylog:
    name: graylog

  home-automation:
    name: home-automation

  librenms:
    name: librenms

  miniflux:
    name: miniflux

  nextcloud:
    name: nextcloud

  traefik:
    name: traefik

#################################################################
#                            VOLUMES                            #
#################################################################
volumes:
  crowdsec-config:
  crowdsec-db:
  github-backup:
  glitchtip-db-dump:
  ha-mosquitto-data:
  librenms-db-dump:
  miniflux-db-dump:
  nc-db-dump:
  scrutiny-influxdb:
  scrutiny-sqlite:
  traefik-access-logs:
  traefik-cert:
