version: "3.7"

#################################################################
#                            DEFAULTS                           #
#################################################################
x-defaults: &defaults
  restart: always
  extra_hosts:
    - "host.docker.internal:host-gateway"

#################################################################
#                            SERVICES                           #
#################################################################
services:
  # =========================
  # =         PROXY         =
  # =========================
  traefik:
    <<: *defaults
    image: traefik:latest
    container_name: traefik
    command:
      # - "--log.level=DEBUG"
      - "--providers.file.directory=/conf"
      - "--providers.file.watch=true"
      - "--providers.docker=true"
      - "--providers.docker.network=traefik"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.middlewares=secure-https@file"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--certificatesresolvers.le-tls.acme.tlsChallenge=true"
      - "--certificatesresolvers.le-tls.acme.email={{ general_mail_admin }}@{{ general_domain_default }}"
      - "--certificatesresolvers.le-tls.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.le-tls-staging.acme.tlsChallenge=true"
      - "--certificatesresolvers.le-tls-staging.acme.email={{ general_mail_admin }}@{{ general_domain_default }}"
      - "--certificatesresolvers.le-tls-staging.acme.storage=/letsencrypt/acme-staging.json"
      - "--certificatesResolvers.le-tls-staging.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--api=true"
      - "--ping.manualrouting=true"
    ports:
      - 80:80
      - 443:443
    networks:
      - traefik
    volumes:
      - ./traefik:/conf
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-cert:/letsencrypt/
    environment:
      - "TZ={{ general_timezone }}"

  # =========================
  # =    UNIFI CONTROLLER   =
  # =========================
  unifi-controller:
    <<: *defaults
    image: linuxserver/unifi-controller:latest
    container_name: unifi-controller
    environment:
      - "TZ={{ general_timezone }}"
      - "PUID=1000"
      - "PGID=1000"
      - "MEM_LIMIT=512M"
    volumes:
      - "{{ general_path_appdata }}/unifi-controller/config:/config"
    ports:
      - "3478:3478/udp"
      - "10001:10001/udp"
      - "8080:8080"
      - "8081:8081"
      - "8443:8443"
      - "8843:8843"
      - "8880:8880"
      - "6789:6789"

  # =========================
  # =    HOME AUTOMATION    =
  # =========================
  ha:
    <<: *defaults
    image: homeassistant/home-assistant:stable
    container_name: ha
    networks:
      - traefik
      - home-automation
    volumes:
      - "./home-automation/home-assistant/automations.yaml:/config/automations.yaml"
      - "./home-automation/home-assistant/configuration.yaml:/config/configuration.yaml"
      - "{{ general_path_appdata }}/home-automation/home-assistant/config:/config"
    environment:
      - "TZ={{ general_timezone }}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ha.entrypoints=websecure"
      - "traefik.http.routers.ha.rule=Host(`ha.{{ general_domain_local }}`)"
      - "traefik.http.routers.ha.tls=true"
      - "traefik.http.services.ha-{{ ansible_hostname }}.loadbalancer.server.port=8123"

  ha-zigbee2mqtt:
    <<: *defaults
    image: koenkk/zigbee2mqtt:latest
    container_name: ha-zigbee2mqtt
    networks:
      - home-automation
    depends_on:
      - ha-mosquitto
    volumes:
      - "{{ general_path_appdata }}/home-automation/zigbee2mqtt:/app/data"
      - "./home-automation/zigbee2mqtt/configuration.yaml:/app/data/configuration.yaml"
    devices:
      - "/dev/serial/by-id/usb-Silicon_Labs_slae.sh_cc2652rb_stick_-_slaesh_s_iot_stuff_00_12_4B_00_22_98_86_5C-if00-port0:/dev/zigbee"
    environment:
      - "TZ={{ general_timezone }}"

  ha-mosquitto:
    <<: *defaults
    image: eclipse-mosquitto:latest
    container_name: ha-mosquitto
    networks:
      - home-automation
    volumes:
      - "./home-automation/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro"
    environment:
      - "TZ={{ general_timezone }}"

  # =========================
  # =        MINIFLUX       =
  # =========================
  miniflux:
    <<: *defaults
    image: miniflux/miniflux:latest
    container_name: miniflux
    networks:
      - traefik
      - miniflux
    depends_on:
      - miniflux-db
    environment:
      - "TZ={{ general_timezone }}"
      - "DATABASE_URL=postgres://miniflux:{{ app_miniflux_db_pass }}@miniflux-db/miniflux?sslmode=disable"
      - "RUN_MIGRATIONS=1"
      - "CREATE_ADMIN=1"
      - "ADMIN_USERNAME={{ app_miniflux_admin_user }}"
      - "ADMIN_PASSWORD={{ app_miniflux_admin_pass }}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.miniflux.entrypoints=websecure"
      - "traefik.http.routers.miniflux.rule=Host(`feed.{{ general_domain_default }}`)"
      - "traefik.http.routers.miniflux.tls.certresolver=le-tls"
      - "traefik.http.services.miniflux-{{ ansible_hostname }}.loadbalancer.server.port=8080"

  miniflux-db:
    <<: *defaults
    image: postgres:13-alpine
    container_name: miniflux-db
    networks:
      - miniflux
    volumes:
      - "{{ general_path_appdata }}/miniflux/db:/var/lib/postgresql/data"
      - "miniflux-db-dump:/backup"
    environment:
      - "TZ={{ general_timezone }}"
      - "POSTGRES_USER=miniflux"
      - "POSTGRES_PASSWORD={{ app_miniflux_db_pass }}"

  # =========================
  # =       SYNCTHING       =
  # =========================
  syncthing:
    <<: *defaults
    image: syncthing/syncthing:1
    container_name: syncthing
    hostname: "{{ ansible_hostname }}"
    networks:
      - traefik
    ports:
      - "22000:22000"
    volumes:
      - "{{ general_path_appdata }}/syncthing/config:/var/syncthing"
      - "/data/syncthing:/data"
    environment:
      - "TZ={{ general_timezone }}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.syncthing.entrypoints=websecure"
      - "traefik.http.routers.syncthing.rule=Host(`syncthing-{{ ansible_hostname }}.{{ general_domain_default }}`)"
      - "traefik.http.routers.syncthing.tls.certresolver=le-tls"
      - "traefik.http.services.syncthing-{{ ansible_hostname }}.loadbalancer.server.port=8384"

  # =========================
  # =         SAMBA         =
  # =========================
  samba:
    <<: *defaults
    image: dperson/samba:latest
    container_name: samba
    ports:
      - "445:445"
    volumes:
      - "{{ general_path_appdata }}/samba/data:/data"
    environment:
      - "TZ={{ general_timezone }}"
      - "USERID={{ ansible_real_user_id }}"
      - "GROUPID={{ ansible_real_group_id }}"
    command: >
      samba.sh -S
      -s "ps2;/data/ps2;yes;no;yes"

  # =========================
  # =       NEXTCLOUD       =
  # =========================
  nextcloud:
    <<: *defaults
    build: ./nextcloud
    container_name: nextcloud
    hostname: nextcloud
    networks:
      - traefik
      - nextcloud
    depends_on:
      - nc-db
    volumes:
      - "{{ general_path_appdata }}/nextcloud/nextcloud/config:/var/www/html"
      - "{{ general_path_appdata }}/nextcloud/nextcloud/data:/var/www/html/data"
    environment:
      - "TZ={{ general_timezone }}"
      - "MYSQL_DATABASE=nextcloud"
      - "MYSQL_USER=nextcloud"
      - "MYSQL_PASSWORD={{ app_nextcloud_db_pass_nextcloud }}"
      - "MYSQL_HOST=nc-db"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nextcloud.entrypoints=websecure"
      - "traefik.http.routers.nextcloud.rule=Host(`nextcloud-media.{{ general_domain_default }}`)"
      - "traefik.http.routers.nextcloud.tls.certresolver=le-tls"
      - "traefik.http.routers.nextcloud.middlewares=nextcloud-redirect-dav@file, nextcloud-redirect-webfinger@file"

  nc-db:
    <<: *defaults
    image: mariadb:10
    container_name: nc-db
    networks:
      - nextcloud
    volumes:
      - "{{ general_path_appdata }}/nextcloud/mariadb/data:/var/lib/mysql"
      - nc-db-dump:/backup
    environment:
      - "TZ={{ general_timezone }}"
      - "MYSQL_ROOT_PASSWORD={{ app_nextcloud_db_pass_root }}"
      - "MYSQL_PASSWORD={{ app_nextcloud_db_pass_nextcloud }}"
      - "MYSQL_DATABASE=nextcloud"
      - "MYSQL_USER=nextcloud"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "mysqladmin -u $$MYSQL_USER --password=$$MYSQL_PASSWORD ping || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 5

  # =========================
  # =         NGINX         =
  # =========================
  nginx-hetvleermuizenkind:
    <<: *defaults
    image: nginx:latest
    container_name: nginx-hetvleermuizenkind
    networks:
      - traefik
    volumes:
      - "{{ general_path_appdata }}/nginx/hetvleermuizenkind:/usr/share/nginx/html"
    environment:
      - "TZ={{ general_timezone }}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx-hetvleermuizenkind.entrypoints=websecure"
      - "traefik.http.routers.nginx-hetvleermuizenkind.rule=Host(`hetvleermuizenkind.{{ general_domain_default }}`)"
      - "traefik.http.routers.nginx-hetvleermuizenkind.tls.certresolver=le-tls"

  # =========================
  # =          DNS          =
  # =========================
  pihole:
    <<: *defaults
    image: pihole/pihole:latest
    container_name: pihole
    hostname: "{{ ansible_hostname }}"
    networks:
      - traefik
      - pihole
    ports:
      - "53:53/tcp"
      - "53:53/udp"
    volumes:
      - "{{ general_path_appdata }}/pihole/pihole/:/etc/pihole/"
      - "{{ general_path_appdata }}/pihole/dnsmasq/:/etc/dnsmasq.d/"
    environment:
      - "TZ={{ general_timezone }}"
      - "PIHOLE_DNS_={{ app_pihole_upstream_dns }}"
      - "WEBPASSWORD={{ app_pihole_web_password }}"
      - "WEBTHEME=default-dark"
      - "DNSMASQ_LISTENING=all"
      - "DNS_BOGUS_PRIV=false"
      - "DNS_FQDN_REQUIRED=false"
    dns: ["{{ app_pihole_upstream_dns }}"]
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pihole.entrypoints=websecure"
      - "traefik.http.routers.pihole.rule=Host(`dns.{{ general_domain_default }}`)"
      - "traefik.http.routers.pihole.tls.certresolver=le-tls"
      - "traefik.http.services.pihole-{{ ansible_hostname }}.loadbalancer.server.port=80"

  doh-server:
    <<: *defaults
    image: satishweb/doh-server:latest
    container_name: doh-server
    hostname: doh-server
    networks:
      - traefik
      - pihole
    environment:
      # - "DEBUG=1"
      - "TZ={{ general_timezone }}"
      - "UPSTREAM_DNS_SERVER=udp:pihole:53"
      - "DOH_HTTP_PREFIX=/dns-query"
      - "DOH_SERVER_TIMEOUT=10"
      - "DOH_SERVER_TRIES=3"
      - "DOH_SERVER_VERBOSE=false"
    depends_on:
      - pihole
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.doh-server.entrypoints=websecure"
      - "traefik.http.routers.doh-server.rule=Host(`{{ app_pihole_domain_prefix }}.dns.{{ general_domain_default }}`)"
      - "traefik.http.routers.doh-server.tls.certresolver=le-tls"
      - "traefik.http.routers.doh-server.middlewares=doh-server-ratelimit@file, doh-server-compress@file"

  # =========================
  # =        LOGGING        =
  # =========================
  grafana:
    <<: *defaults
    image: grafana/grafana:latest
    container_name: grafana
    networks:
      - traefik
      - loki
    volumes:
      - "{{ general_path_appdata }}/grafana/data:/var/lib/grafana"
    environment:
      - "TZ={{ general_timezone }}"
      - "GF_SECURITY_ADMIN_USER={{ app_grafana_username }}"
      - "GF_SECURITY_ADMIN_PASSWORD={{ app_grafana_password }}"
      - "GF_SECURITY_DISABLE_GRAVATAR=true"
      - "GF_SMTP_ENABLED=true"
      - "GF_SMTP_HOST={{ mailjet_host }}:{{ mailjet_port }}"
      - "GF_SMTP_USER={{ mailjet_username }}"
      - "GF_SMTP_PASSWORD={{ mailjet_password }}"
      - "GF_SMTP_FROM_ADDRESS=grafana@{{ general_domain_default }}"
      - "GF_SMTP_FROM_NAME=Grafana - JenswBE"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.rule=Host(`grafana.{{ general_domain_default }}`)"
      - "traefik.http.routers.grafana.tls.certresolver=le-tls"
      - "traefik.http.services.grafana-{{ ansible_hostname }}.loadbalancer.server.port=3000"

  loki:
    <<: *defaults
    image: grafana/loki:2.3.0
    container_name: loki
    command: -config.file=/etc/loki/config.yml
    user: "{{ ansible_real_user_id }}"
    networks:
      - traefik
      - loki
    ports:
      - "3100:3100"
    volumes:
      - ./loki/config.yml:/etc/loki/config.yml:ro
      - "{{ general_path_appdata }}/loki/data:/loki"
    environment:
      - "TZ={{ general_timezone }}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.loki.entrypoints=websecure"
      - "traefik.http.routers.loki.rule=Host(`loki.{{ general_domain_default }}`)"
      - "traefik.http.routers.loki.tls.certresolver=le-tls"
      - "traefik.http.routers.loki.middlewares=loki-auth@file"
      - "traefik.http.routers.loki-ready.entrypoints=websecure"
      - "traefik.http.routers.loki-ready.rule=Host(`loki.{{ general_domain_default }}`) && PathPrefix(`/ready`)"
      - "traefik.http.routers.loki-ready.tls.certresolver=le-tls"
      - "traefik.http.services.loki-{{ ansible_hostname }}.loadbalancer.server.port=3100"

  promtail:
    <<: *defaults
    image: grafana/promtail:2.3.0
    container_name: promtail
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./promtail/config.yml:/etc/promtail/config.yml:ro
      - promtail-positions:/positions
      - /var/log:/var/log:ro
    networks:
      - loki
    environment:
      - "TZ={{ general_timezone }}"

  # =========================
  # =         BACKUP        =
  # =========================
  borgmatic:
    <<: *defaults
    image: b3vis/borgmatic:latest
    container_name: borgmatic
    privileged: true # Required for borg mount
    cap_add:
      - SYS_ADMIN # Required for borg mount
    volumes:
      # Backup locations
      - "{{ general_path_appdata }}/home-automation/home-assistant/config:/mnt/source/home-automation/home-assistant/config:ro"
      - "nc-db-dump:/mnt/source/nextcloud/dbdump:ro"
      - "{{ general_path_appdata }}/nextcloud/nextcloud/data:/mnt/source/nextcloud/data:ro"
      - "{{ general_path_appdata }}/nextcloud/nextcloud/config:/mnt/source/nextcloud/config:ro"
      # Config and cache
      - "./borgmatic/borgmatic.d:/etc/borgmatic.d"
      - "./borgmatic/ssh:/root/.ssh"
      - "{{ general_path_appdata }}/borgmatic/borgmatic/config:/root/.config/borg"
      - "{{ general_path_appdata }}/borgmatic/borgmatic/cache:/root/.cache/borg"
      - "{{ general_path_appdata }}/borgmatic/borgmatic/restore:/mnt/restore"
    devices:
      - "/dev/fuse:/dev/fuse" # Required for borg mount
    environment:
      - "TZ={{ general_timezone }}"
      - "BORG_PASSPHRASE={{ app_borgmatic_borg_passphrase }}"
      - "BORG_HOSTNAME_IS_UNIQUE=yes" # Automatically removes stale locks
      - "BORG_HOST_ID={{ ansible_hostname }}"

#################################################################
#                            NETWORKS                           #
#################################################################
networks:
  home-automation:
    name: home-automation

  miniflux:
    name: miniflux

  nextcloud:
    name: nextcloud

  pihole:
    name: pihole

  traefik:
    name: traefik

  loki:
    name: loki

#################################################################
#                            VOLUMES                            #
#################################################################
volumes:
  miniflux-db-dump:
  nc-db-dump:
  promtail-positions:
  traefik-cert:
